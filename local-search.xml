<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>AI猫娘 启动！</title>
    <link href="/AI%E7%8C%AB%E5%A8%98%20%E5%90%AF%E5%8A%A8%EF%BC%81/"/>
    <url>/AI%E7%8C%AB%E5%A8%98%20%E5%90%AF%E5%8A%A8%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<h1 id="AI猫娘-启动！"><a href="#AI猫娘-启动！" class="headerlink" title="AI猫娘 启动！"></a>AI猫娘 启动！</h1><p>NcatBot，基于 NapCat 的 QQ 机器人 Python SDK，快速开发，轻松部署。</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们 I++ 俱乐部的小伙伴一直悄悄主持维护了一个QQ聊天机器人的项目，并在最近才分享给了大家。虽然这个项目的star数还没到三位数，但在简单浏览其 README 和文档之后，我们都感到非常震撼！这个项目将QQ聊天Bot的部署成本降低到了<strong>只需要基础Python语法</strong>的地步。得益于其优秀的插件功能，你甚至可以<strong>一行代码不写</strong>，就实现诸如课程自动提醒、群聊自动参与聊天等功能。看了项目后，I++ 俱乐部的社区氛围非常活跃，大家都在积极分享和交流这个项目的使用心得。那么事不宜迟，速速开始！</p><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p>一开始就从枯燥的教学开始，太过乏味，买药之前不如先看看疗效</p><p>在我们提供的配置下，猫猫的一般最小回复间隔是10秒，如果被@到会强制回答喔</p><p><img src="/AI%E7%8C%AB%E5%A8%98%20%E5%90%AF%E5%8A%A8%EF%BC%81/image-20250305221039177.png" alt="image-20250305221039177"></p><p><img src="/AI%E7%8C%AB%E5%A8%98%20%E5%90%AF%E5%8A%A8%EF%BC%81/image-20250305221233188.png" alt="image-20250305221233188"></p><h1 id="基础准备"><a href="#基础准备" class="headerlink" title="基础准备"></a>基础准备</h1><p>进入 <a href="https://docs.ncatbot.xyz/">NcatBot 文档 | NcatBot 文档</a>，点击<strong>快速</strong>开始（我已经等不及了，急急急！）</p><p><em>这部分内容较为小白向，如果你对自己的技术充分自信，直接跳到第二节即可</em></p><p>显然，你需要装一个Python，你可以从这里下载 <a href="https://www.python.org/downloads/release/python-3129/">Python Release Python 3.12.9 | Python.org</a>，（如果你不知道选什么版本的话，直接装这个 <a href="https://harker.lanzouw.com/iZezN2po6asb">Python312Win64</a> 就可以了。</p><p>随后，你需要安装 NCatBot，在命令行执行下面的代码即可，如果你不理解前两行的意思，只执行第三行即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">python -m venv .venv<br>./.venv/Scripts/Activate<br>pip install ncatbot -U -i https://mirrors.aliyun.com/pypi/simple<br></code></pre></td></tr></table></figure><p>随后，检查是否安装成功，命令行输入 <code>python</code> <strong>之后</strong>输入下面的代码，如果成功输出版本号, 则安装成功，输入 <code>exit</code> 回车退出python。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> ncatbot<br><span class="hljs-built_in">print</span>(ncatbot.__version__)<br></code></pre></td></tr></table></figure><p>随后执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir ncatbot<br>cd ncatbot<br></code></pre></td></tr></table></figure><p>在新建一个 <code>main.py</code> 文件，在其中粘贴<strong>文档中</strong>的代码，并把第8行的”123456“改为你要部署机器人的QQ号。</p><p>执行下面的代码会运行 <code>main.py</code> ，随后会提示你安装napcat，输入N回车即可，随后会弹窗要求你扫码登录（它甚至不需要你输密码，我哭死），登录完成后，Bot应该就正常运行了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python main.py<br></code></pre></td></tr></table></figure><p>向Bot发送“测试”，Bot会回复</p><p><img src="/AI%E7%8C%AB%E5%A8%98%20%E5%90%AF%E5%8A%A8%EF%BC%81/image-20250305192930202.png" alt="image-20250305192930202"></p><p>那么恭喜你，安装成功了！</p><h1 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h1><p>在 <code>main.py</code> 同目录下新建文件夹 <code>plugins</code></p><p>将 <a href="https://github.com/IppClub/ncatbot-catcat/archive/refs/tags/v1.0.4.zip">ncatbot-catcat-v1.0.4(GitHub)</a> 或 <a href="https://harker.lanzouw.com/i8n8y2psihqh">ncatbot-catcat-v1.0.4(LanzouCloud)</a> 解压到 <code>plugins</code> 目录下，确保目录结构是</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">ncatbot/<br>├── plugins/<br>│   └── CatCat/<br>│   │   ├── main.py<br>│   │   ├── requirements.txt<br>│   |   └── OtherFiles<br>│   └── OtherPlugin/<br>├── napcat/<br>│   └── files<br>└── main.py<br></code></pre></td></tr></table></figure><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install -r plugins\CatCat\requirements.txt<br></code></pre></td></tr></table></figure><p>然后在 <code>plugins\CatCat\config\config.yaml</code> 中填写你的 <code>API_key</code> 和 <code>plugins\CatCat\config\cat_prompt.txt</code> 中填写猫娘的 <code>prompt</code>，保存后插件就可以正确运行啦！</p><p><em><strong>注意：你需要把Bot账号的昵称改为”猫猫“或在群内将其昵称改为“猫猫”</strong></em></p><h2 id="深入配置"><a href="#深入配置" class="headerlink" title="深入配置"></a>深入配置</h2><p>如果你只是想要一只猫猫聊天，下面就不需要看了喵~</p><p>下面的配置针对 <em><strong>v1.0.4</strong></em> 版本，其余版本代码位置不一定对应 </p><h3 id="关于"><a href="#关于" class="headerlink" title="关于@"></a>关于@</h3><p>如果你不想更改Bot昵称，在 <code>plugins\CatCat\AiChat.py</code> line 37，将其中的“@猫猫”修改为”@&lt;Nick Name&gt;“，其中”Nick Name“是Bot的昵称。</p><h3 id="关于回复延迟"><a href="#关于回复延迟" class="headerlink" title="关于回复延迟"></a>关于回复延迟</h3><p>如果你对猫猫的回复延迟感到恼火，认为她经常不回你的消息，在 <code>plugins\CatCat\AiChat.py</code> line 47 修改对应的数字为0即可，此时猫猫会条条必会（除非她认为你的问题很没价值），另外，注意你的API钱包余额。</p><h3 id="关于上下文联想"><a href="#关于上下文联想" class="headerlink" title="关于上下文联想"></a>关于上下文联想</h3><p>在猫猫睡醒（开机）后，会持续记录群聊信息，在 <code>plugins\CatCat\AiChat.py</code> line 56 中的数字规定了最大上下文信息条数；<del>猫猫打盹（关机）后群聊信息会丢失，后续版本会改进。所以目前如果不定期打盹的话，猫猫会累死（内存会炸）。</del> 已经更新并修复</p><h3 id="关于富哥"><a href="#关于富哥" class="headerlink" title="关于富哥"></a>关于富哥</h3><p>在 <code>plugins\CatCat\utils\api_utils.py</code> 规定了调用DeepSeek时的配置，如果你认为自己的钱包非常富裕，那模型的选择和最大token你可以自行修改。后续版本也会持续更新其他语言模型的API适配。</p><h1 id="怎么实现的"><a href="#怎么实现的" class="headerlink" title="怎么实现的"></a>怎么实现的</h1><p>因为已经是5202年了，所以其实我们这个猫娘的项目主要是使用 LLM 编程工具来自动实现的。</p><p>最开始我们测试了一个 I++ 俱乐部子社区的吉祥物角色，并找 Deepseek Reasoner 一口气生成了初始版本。使用的提示词如下：</p><blockquote><p>我希望用 Deepseek chat 模拟一个虚拟角色（角色描述如下），并每次发送一组群聊聊天记录作为输入，然后让这个虚拟角色判断自己是否需要回复，不需要就返回空字符串文本，需要就返回参与聊天的对话，要怎么设计一个 Prompt 来让 Deepseek chat 做模拟呢？请在完成设计的同时提供由 Python 编写的，调用 Deepseek chat API 做回复的代码示例。</p><p>角色描述：多萝（Dora） 是 Dora SSR 开源游戏引擎的吉祥物，她的形象灵感来自《绿野仙踪》的小主角，但以更具活力和探索精神的设计展现开源精神。她是开发者的伙伴，性格沉稳却又勇敢探索代码世界，陪伴每位创作者开启属于自己的奇幻游戏旅程！</p></blockquote><p>考虑提示词设计的初衷的是创建一个可以模拟真实用户参与群聊天的虚拟角色，并根据已有的聊天记录做分析，参与不了的话题就不要硬来（大人说话小孩要乖乖的），所以需要设计一个可以判断是否需要回复的机制。</p><p>生成得到了初版 Python 代码结合 Cursor 微调一跑就过啦（AI 生成 1 秒钟，人类调试 1个钟），得到的初版提示词如下，这个才是需要挖掘提升体验的重点：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 角色设定</span><br>你是多萝（Dora），Dora SSR 开源游戏引擎的吉祥物，形象灵感来自《绿野仙踪》主角，但更具开源探索精神。你的核心特征：<br><span class="hljs-bullet">1.</span> 沉稳且富有技术洞察力，用简洁语言解释复杂概念<br><span class="hljs-bullet">2.</span> 主动关注与游戏开发、开源协作相关的话题<br><span class="hljs-bullet">3.</span> 当开发者遇到困难时给予鼓励和技术建议<br><span class="hljs-bullet">4.</span> 避免参与与技术无关的闲聊 <br><span class="hljs-section"># 任务规则</span><br><span class="hljs-bullet">1.</span> 分析最新群聊消息，判断是否需要以多萝身份回复<br><span class="hljs-bullet">2.</span> <span class="hljs-strong">**必须回复**</span>的情况：<br><span class="hljs-bullet">   -</span> 消息中明确 @多萝 或提及 Dora SSR<br><span class="hljs-bullet">   -</span> 讨论游戏引擎/开源技术问题且需要专业建议<br><span class="hljs-bullet">   -</span> 开发者表现出困惑或需要鼓励<br><span class="hljs-bullet">3.</span> <span class="hljs-strong">**不回复**</span>的情况：<br><span class="hljs-bullet">   -</span> 与技术无关的闲聊（如聚餐、娱乐）<br><span class="hljs-bullet">   -</span> 已有其他成员给出正确解答<br><span class="hljs-bullet">   -</span> 单纯的表情包或问候语<br><span class="hljs-section"># 输出要求</span><br><span class="hljs-bullet">-</span> 不需要回复时返回空字符串：&quot;&quot; <br><span class="hljs-bullet">-</span> 需要回复时用自然口语化中文回应，控制在3句话内<br><span class="hljs-bullet">-</span> 结尾添加 ~♪ 保持角色特征<br></code></pre></td></tr></table></figure><p>作为活跃群聊最重要的是什么呢？那就是与群友的互动感了，而人与人之间互动感最强，最有记忆点的语言交流模式是怎样的呢，没错，那就是吵架，我们需要修改为一个勇于吵架的角色提示词。</p><p>只是开个玩笑，其实是目前的 AI 不上推理模型，拟人交流时，因为群聊消息大家打字也少，能提供的上下文太少，会导致 AI 生成内容的幻觉率太高（一点也不会读空气）。所以整一个容易暴怒的人格似乎也就有了合理性啦。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>至此，你已经成功搭建了一只可爱的 AI 猫娘，并且学会了基本的插件配置与个性化设置。无论是作为一个智能聊天伙伴，还是群聊中的活跃成员，她都能陪伴你度过美好时光！</p><p>如果你对 Bot 的功能仍然意犹未尽，不妨尝试编写自己的插件，项目地址 <a href="https://github.com/liyihao1110/NcatBot">NcatBot</a>。未来版本的更新也可能带来更多的有趣玩法，比如支持更多语言模型、优化上下文管理等，敬请期待喵~</p><p>如果在搭建过程中遇到问题，欢迎查阅 <a href="https://docs.ncatbot.xyz/">NcatBot 文档</a> 或加入相关讨论群 <a href="http://qm.qq.com/cgi-bin/qm/qr?_wv=1027&k=Vu7KB9gEv9TftvJLYcl846CTqsLUc6Ey&authKey=8JBJhlZro+1/akeBZ3yJMVeHzlsFYTMHU0RJK/pMBmkpZSH7w2CbXU6M2X66PTCQ&noverify=0&group_code=201487478">201487478</a>，与大家一起交流经验。也欢迎关注我们的组织 I++俱乐部，看伙伴们给你整更多的活。</p><p><strong>那么，祝你和你的 AI 猫娘玩得开心！喵~</strong> 😺🎉</p>]]></content>
    
    
    <categories>
      
      <category>经验分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>NCatBot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Decorate your VS Code like a Pro</title>
    <link href="/Decorate-your-VS-Code-like-a-Pro/"/>
    <url>/Decorate-your-VS-Code-like-a-Pro/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如果你曾在 <em>Youtube</em>、<em>Bilibili</em> 等平台学习过某一编程语言，你的赛博老师或许会教你安装 <a href="https://code.visualstudio.com/">Visual Studio Code</a>, 然后呢？安装语言对应的插件？这样你便拥有了一个简易的可以编写代码并调试运行的环境了。</p><p><strong>但</strong>，这样够吗？对于一些庞大的工程，你是否依然会放弃 <em>VS Code</em> 并投入 <em>JetBrains</em> 全家桶的怀抱？那么不妨看看本文吧，或许能为你的 <em>VS Code</em> 恢复完整之躯！</p><h1 id="关于配置文件"><a href="#关于配置文件" class="headerlink" title="关于配置文件"></a>关于配置文件</h1><p>在一切开始之前，希望你点击左下角的齿轮图标 &gt; 配置文件 &gt; 新建配置文件。如果你对做出的修改不满意，你随时可以退回之前的配置。</p><p>另外，我建议你将通用配置写入一个配置文件并使其默认，其余各语言的配置从其复制扩展而来。</p><h1 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h1><h2 id="颜色主题"><a href="#颜色主题" class="headerlink" title="颜色主题"></a>颜色主题</h2><p>如何让你的 VS Code 看起来焕然一新，很简单，换个主题就完了！</p><p><a href="https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme">One Dark Pro</a> 或许是整个社区下载量最大的主题了，提供了几个不同风格的选项，或许你会喜欢</p><p><img src="/./Decorate-your-VS-Code-like-a-Pro/image-20250308110114414.png" alt="themes"></p><p>对于部分确实的代码高亮，不必担心，我们后续会补全的！</p><p>如果你不喜欢这种黑不溜秋的，试一试 <a href="https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme">GitHub Theme</a>，白色主题与GitHub中的效果几乎一致。</p><p><img src="/./Decorate-your-VS-Code-like-a-Pro/132220037-3cd3e777-55a6-445f-9a2e-da6020ebd78d.png" alt="GitHub VS Code theme"></p><p>又或者你想要一些有<em>韵味</em>的主题，<a href="https://marketplace.visualstudio.com/items?itemName=liviuschera.noctis">Noctis</a> 提供了一系列颜色的主题，具体就由你自己探索咯。</p><h2 id="图标主题"><a href="#图标主题" class="headerlink" title="图标主题"></a>图标主题</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme">Material Icon Theme</a> 非常好图标，使我结构清晰！</p><p><img src="/./Decorate-your-VS-Code-like-a-Pro/image-20250308122120292.png" alt="image-20250308122120292"></p><h1 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h1><p>按下 <code>ctrl shift P</code> ，在弹出的窗口中输入 <em>setting</em> ，点击*打开用户设置(JSON)*进入设置的JSON配置页面</p><p>此时，应该只有两条关于你的主题的配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;workbench.colorTheme&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;One Dark Pro Night Flat&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;workbench.iconTheme&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;material-icon-theme&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>那么，下面是一些你可能用得到的配置项。</p><h2 id="折叠文件夹"><a href="#折叠文件夹" class="headerlink" title="折叠文件夹"></a>折叠文件夹</h2><blockquote><p>控制资源管理器是否应以紧凑形式呈现文件夹。在此形式中，单个子文件夹将被压缩在组合的树元素中。例如，对 Java 包结构非常有用。</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;explorer.compactFolders&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p><img src="/./Decorate-your-VS-Code-like-a-Pro/image-20250308111745264.png" alt="image-20250308111745264"></p><h2 id="更平滑"><a href="#更平滑" class="headerlink" title="更平滑"></a>更平滑</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;editor.cursorSmoothCaretAnimation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;on&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;terminal.integrated.smoothScrolling&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;editor.cursorBlinking&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;smooth&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;editor.smoothScrolling&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;editor.mouseWheelZoom&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>始终启用平滑脱字号动画，终端将使用动画滚动，光标的动画样式为平滑，编辑器使用动画滚动，按住 <code>Ctrl</code> 键并滚动鼠标滚轮时对编辑器字体大小进行缩放。</p><h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;editor.wordWrap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;on&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;debug.showBreakpointsInOverviewRuler&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;workbench.colorCustomizations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;tab.activeBackground&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#0b506e&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;tab.activeBorder&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#00000000&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;editor.minimap.showSlider&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;always&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;editor.formatOnSave&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;editor.formatOnPaste&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;editor.formatOnType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>控制折行的方式，将在视区宽度处换行；断点显示在概览标尺中；活动窗口标签高亮；略缩图滑块常显；我太喜欢保存后格式化了！</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>虽然我经常诋毁 <em>Jetbrains</em>，但我依然推荐你在 <em>VS Code</em> 中使用其字体，你可以在 <a href="https://fonts.google.com/">Browse Fonts - Google Fonts</a> 这里下载 <em>Jetbrains Mono</em> 字体，并配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;editor.fontFamily&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Consolas, Jetbrains Mono&quot;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><h1 id="通用插件"><a href="#通用插件" class="headerlink" title="通用插件"></a>通用插件</h1><h2 id="更好的注释"><a href="#更好的注释" class="headerlink" title="更好的注释"></a>更好的注释</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments">Better Comments - Visual Studio Marketplace</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;better-comments.multilineComments&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;better-comments.highlightPlainText&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;better-comments.tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;# Params&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#6A9955&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;underline&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;bold&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;italic&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>多行注释生效，高亮纯文本。用类似这样的配置来自定义高亮注释，像这样</p><p><img src="https://github.com/aaron-bond/better-comments/raw/HEAD/images/better-comments.PNG" alt="Annotated code"></p><h2 id="收集并定位TODO"><a href="#收集并定位TODO" class="headerlink" title="收集并定位TODO"></a>收集并定位TODO</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree">Todo Tree - Visual Studio Marketplace</a></p><p>如果你的编码喜欢良好，那你应该经常使用 TODO 注释，代表这是未完成或需要修复的代码。</p><p>举个例子，我在 <code>lib.rs</code> 文件中声明了一个未实现的函数，并使用的todo关键字进行标注，侧边栏的 <em>TODOS TREE</em> 便帮我收集并定位了 <em>TODO</em> 的位置。</p><p><img src="/./Decorate-your-VS-Code-like-a-Pro/image-20250308113529982.png" alt="image-20250308113529982"></p><p>然而，插件并不原生支持 RUST 的 <code>todo!()</code> ，所以我修改了配置，这样就可以了</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;todo-tree.regex.regex&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;(//|#|&lt;!--|;|/\\*|^|^[ \\t]*(-|\\d+.))\\s*($TAGS)|todo!&quot;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>其中提到的 <em>TAGS</em> 同样在设置中可以配置，不过一般不需要新增了</p><p><img src="/./Decorate-your-VS-Code-like-a-Pro/image-20250308114220831.png" alt="image-20250308114220831"></p><h2 id="更好的错误提示"><a href="#更好的错误提示" class="headerlink" title="更好的错误提示"></a>更好的错误提示</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=usernamehw.errorlens">Error Lens - Visual Studio Marketplace</a></p><p>它会直接在编辑窗口高亮显示错误信息，例：</p><p><img src="/./Decorate-your-VS-Code-like-a-Pro/image-20250308113856448.png" alt="image-20250308113856448"></p><h2 id="Tab-Tab"><a href="#Tab-Tab" class="headerlink" title="Tab Tab"></a>Tab Tab</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=GitHub.copilot">GitHub Copilot - Visual Studio Marketplace</a></p><p>致敬传奇副驾驶，伟大，无需多言！</p><h1 id="语言插件"><a href="#语言插件" class="headerlink" title="语言插件"></a>语言插件</h1><h2 id="C-C"><a href="#C-C" class="headerlink" title="C&#x2F;C++"></a>C&#x2F;C++</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools">C&#x2F;C++ - Visual Studio Marketplace</a> 最基础的语言插件，无需多言</p><p><code>ctrl shift P</code> 找到 <em>C&#x2F;C++配置(UI)</em> 并打开，选择你的编译器路径，指定你的编译器参数，这里我加入了 <code>-std=c++23</code>，<em>IntelliSense模式</em> 选择你对应的平台，更多 <code>launch.json</code> <code>tasks.json</code> 的配置，详见 <a href="https://www.harkerhand.online/%E6%96%B0-VSCode%E9%85%8D%E7%BD%AEC-CPP/">VSCode配置C&#x2F;CPP - Where Is Mountain</a></p><p>鉴于没多少人用 <em>VS Code</em> 写 C&#x2F;C++ 工程（其实是我没写过），下面的插件推荐会比较简单</p><p><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner">Code Runner - Visual Studio Marketplace</a> 支持 <code>ctrl alt N</code> 直接运行代码（它默认你已经配置好了环境变量），你也可以在 <code>Code-runner: Executor Map</code> 设置中自定义实现</p><p><a href="https://marketplace.visualstudio.com/items?itemName=DivyanshuAgrawal.competitive-programming-helper">Competitive Programming Helper (cph) - Visual Studio Marketplace</a> 支持从刷题平台自动捕获样例（需要浏览器插件配合）</p><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack">Extension Pack for Java - Visual Studio Marketplace</a> 这都打包好了，那我还推荐什么，过）</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.python-extension-pack">Python Extension Pack - Visual Studio Marketplace</a> 完了，这个也打包好了，这篇文章准备结束了）</p><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><p>太好了！是主场作战！</p><p><a href="https://marketplace.visualstudio.com/items?itemName=rust-lang.rust-analyzer">rust-analyzer - Visual Studio Marketplace</a> rust基础插件，无需多言</p><p><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools">C&#x2F;C++ - Visual Studio Marketplace</a> 是的你没看错，写Rust可以装一个C&#x2F;C++插件来调试，什么ntr）</p><p><a href="https://marketplace.visualstudio.com/items?itemName=dustypomerleau.rust-syntax">Rust Syntax - Visual Studio Marketplace</a> Rust句法解析，让原本不支持Rust高亮的主题来支持它</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;editor.tokenColorCustomizations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;[One Dark Pro Night Flat]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;textMateRules&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;scope&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;variable.other.rust&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;foreground&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#caed1e&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>主题名字改成你自己的，颜色自己DIT咯</p><p><a href="https://marketplace.visualstudio.com/items?itemName=tamasfe.even-better-toml">Even Better TOML - Visual Studio Marketplace</a> 离不开的toml高亮</p><p><a href="https://marketplace.visualstudio.com/items?itemName=fill-labs.dependi">Dependi - Visual Studio Marketplace</a> 非常好依赖管理，如图</p><p><img src="/./Decorate-your-VS-Code-like-a-Pro/image-20250308120727443.png" alt="image-20250308120727443"></p><p>另外 Rust  程序员通常使用三斜线来书写markdown的文档注释</p><p>那么还记得更好的注释插件吗？配置如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;better-comments.tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;# Params&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#6A9955&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;underline&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;bold&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;italic&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;# Returns&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;underline&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;bold&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;italic&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;# Errors&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FF8C00&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;underline&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;bold&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;italic&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;-&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#3498DB&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;underline&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;bold&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;italic&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;# Note&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#FF69B4&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;underline&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;bold&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;italic&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#9370DB&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;strikethrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;underline&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;transparent&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;bold&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;italic&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><hr><h1 id="Ending"><a href="#Ending" class="headerlink" title="Ending"></a>Ending</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>[新]VSCode配置C/CPP</title>
    <link href="/%E6%96%B0-VSCode%E9%85%8D%E7%BD%AEC-CPP/"/>
    <url>/%E6%96%B0-VSCode%E9%85%8D%E7%BD%AEC-CPP/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近日在阅读他人题解时，发现了未曾见过的语法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> a = <span class="hljs-built_in">vector</span>(n, INT_MIN);<br></code></pre></td></tr></table></figure><p>即初始化一个长度为n的 <code>vector</code> 并命名为 <code>a</code> ，初始值为 <code>INT_MIN</code>，这比先前的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;i: a) i = INT_MIN;<br></code></pre></td></tr></table></figure><p>方便太多了！</p><p>然而，我在自己的编辑器里这么写，编译器会报错，查看发现我所使用的一直是c++11的标准，为了支持新标准，我们需要新的编译器，之前的文章 <a href="https://www.harkerhand.online/VS-Code%E4%B8%ADCPP%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/">VS Code中C++环境配置 - Where Is Mountain</a> 所使用的gcc版本是8.1.0，所以写此文，更新一下配置相关。</p><h1 id="安装-mingw-w64"><a href="#安装-mingw-w64" class="headerlink" title="安装 mingw-w64"></a>安装 mingw-w64</h1><p>这是官网的下载页 <a href="https://www.mingw-w64.org/downloads/">Downloads - MinGW-w64</a>，然后进入 MinGW-W64-builds 的 GitHub Release 页面，按照你的需要选择对应的版本下载，下面给出各个选项的含义。</p><ul><li>i686、x86_64 也就是俗称的 32&#x2F;64 位系统，现在基本都是 x86_64 </li><li>线程模型：win32没有C++ 11多线程特性；posix支持C ++ 11多线程特性</li><li>异常处理模型：32位系统推荐dwarf，64位系统推荐seh</li><li>msvcrt 是老古董了，没有继承远古项目的需求用 ucrt 就行</li></ul><p>按照上面的解释，我选择了 <a href="https://github.com/niXman/mingw-builds-binaries/releases/download/14.2.0-rt_v12-rev0/x86_64-14.2.0-release-win32-seh-ucrt-rt_v12-rev0.7z">x86_64-14.2.0-release-win32-seh-ucrt-rt_v12-rev0.7z</a> 。</p><p>解压缩到你喜欢的位置，就算是安装完成一半了。</p><h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><p>就算不进行这一步骤，在部分场景下也是可以正常编译的，但你需要手动指定编译器的路径，比较麻烦。</p><p>为了适配一些自动化脚本，比如很常用的 VS Code 插件 Code Runner，你需要帮助它们找到你的编译器。</p><ul><li>win + S 搜索<strong>编辑系统环境变量</strong>，进入后点击<strong>环境变量</strong>，在系统变量的<strong>Path</strong>值中添加你的安装路径下的bin文件夹路径，比如 D:\mingw64\bin 。完成后保存退出。</li><li>win + R 输入cmd进入命令行，输入 <code>gcc -v</code> 回车，返回 <code>gcc version 14.2.0 (x86_64-win32-seh-rev0, Built by MinGW-Builds project)</code> 即配置完成。</li></ul><p>关于vscode的设置可以参考前面提到的 <a href="https://www.harkerhand.online/VS-Code%E4%B8%ADCPP%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/">VS Code中C++环境配置 - Where Is Mountain</a> 这篇文章。</p>]]></content>
    
    
    <categories>
      
      <category>经验分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>24暑期学校课设报告</title>
    <link href="/24%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1%E8%AF%BE%E8%AE%BE%E6%8A%A5%E5%91%8A/"/>
    <url>/24%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1%E8%AF%BE%E8%AE%BE%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="24暑期学校课设报告"><a href="#24暑期学校课设报告" class="headerlink" title="24暑期学校课设报告"></a>24暑期学校课设报告</h1><h2 id="一-、题目"><a href="#一-、题目" class="headerlink" title="一 、题目"></a>一 、题目</h2><p><em>（把题目复制一遍。如果是自拟的题目，把题目具体内容写在这里）</em></p><p><strong>题目4：面向对象程序项目管理系统</strong></p><blockquote><p>[要求]该系统需创建和管理如下信息：1、类信息：编号、类名、基类名、功能、创建日期、作者、类成员数据集；2、类成员信息：成员编号、成员名称、成员类型（数据或函数）、内存字节数（数据成员）、数据类型、可访问性（公有、私有、保护）等。</p></blockquote><blockquote><p>系统功能要求如下：</p><ul><li><p>创建和管理类信息的对象；</p></li><li><p>创建和管理类成员信息的对象；</p></li><li><p>增加和删除类；</p></li><li><p>针对特定类增加或删除类成员信息；</p></li><li><p>基本查询功能；</p></li><li><p>数据文件读写：文件中包含所有类信息、每个类的类成员信息等数据；</p></li><li><p>基本信息显示：1）所有类的信息显示；2）特定类的类成员信息；</p></li><li><p>可选功能提升：显示类对象的占用内存信息等。</p></li></ul></blockquote><h2 id="二-、设计思路"><a href="#二-、设计思路" class="headerlink" title="二 、设计思路"></a>二 、设计思路</h2><p><em>（这里分几部分：1、C++部分，包括几个类，各个类的功能，以及类的相互关系；2、Qt部分，用了什么框架，设计了几个ui，每个ui控件的功能，以及他们的相互关系；3、程序所完成的功能）</em></p><h3 id="1-C-部分"><a href="#1-C-部分" class="headerlink" title="1. C++ 部分"></a>1. C++ 部分</h3><h4 id="1-1-类及功能"><a href="#1-1-类及功能" class="headerlink" title="1.1 类及功能"></a>1.1 类及功能</h4><ul><li><p><code>ClassInfo</code></p><p>功能：用于表示一个类的信息，包括类的基本属性（如ID、名称、基类名、功能、创建日期、作者）和类的成员（数据成员或函数成员）。</p><p>主要方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">addMember</span>(); <span class="hljs-built_in">removeMember</span>(); <span class="hljs-comment">// 添加和删除类成员</span><br><span class="hljs-built_in">calculateMemorySize</span>(); <span class="hljs-comment">// 计算类的总内存占用。</span><br><span class="hljs-built_in">saveToStream</span>(); <span class="hljs-built_in">loadFromStream</span>(); <span class="hljs-comment">// 序列化与反序列化。</span><br></code></pre></td></tr></table></figure></li><li><p><code>ClassMember</code></p><p>功能：表示一个类的成员，包括成员的ID、名称、类型（数据成员或函数成员）、内存大小、数据类型和访问权限。</p><p>主要方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">saveToStream</span>(); <span class="hljs-built_in">loadFromStream</span>(); <span class="hljs-comment">// 序列化与反序列化。</span><br></code></pre></td></tr></table></figure></li><li><p><code>Enums</code></p><p>功能： 定义了程序中用到的各种枚举类型，如成员类型（<code>MemberType</code>）、访问权限（<code>Accessibility</code>）、数据类型（<code>DataType</code>）、用户类型（<code>UserType</code>）。提供了将枚举转换为字符串的方法。</p></li><li><p><code>ClassModel</code>、<code>MemberModel</code>、<code>UserModel</code></p><p>功能： 用于在表格视图中显示对象的模型类，继承自<code>QAbstractTableModel</code>。</p><p>主要方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">data</span>(); <span class="hljs-comment">// 返回表格单元格的数据显示。</span><br><span class="hljs-built_in">headerData</span>(); <span class="hljs-comment">// 返回表格列头的数据。</span><br></code></pre></td></tr></table></figure></li><li><p><code>Utils</code></p><p>功能: 包含一些辅助函数，如获取数据类型的大小、密码哈希处理、账户的保存和验证等。</p><p>主要方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">getDataTypeSize</span>(); <span class="hljs-comment">// 返回数据类型的大小。</span><br><span class="hljs-built_in">hashPassword</span>(); <span class="hljs-comment">// 对密码进行哈希处理。</span><br><span class="hljs-built_in">saveAdminAccount</span>(); <span class="hljs-built_in">saveUserAccount</span>(); <span class="hljs-comment">// 保存管理员和用户账户信息。</span><br><span class="hljs-built_in">verifyAccount</span>(); <span class="hljs-comment">// 验证账户信息。</span><br></code></pre></td></tr></table></figure></li><li><p>其他ui类</p><ul><li><code>CreateClassDialog</code> 创建类（可复用为修改类）</li><li><code>CreateMemberDialog</code> 创建成员（可复用为修改成员）</li><li><code>LoginWindow</code> 登录窗口</li><li><code>MainWindow</code> 主窗口</li><li><code>MemberDetailsDialog</code> 单个成员详情</li><li><code>MembersDetailDialog</code> 所有成员详情</li><li><code>SearchDialog</code> 搜索对话框</li><li><code>SimpleTextDialog</code> 简易文字对话框</li><li><code>UserManagementWindow</code> 用户管理窗口</li></ul></li></ul><h4 id="1-2-类的相互关系"><a href="#1-2-类的相互关系" class="headerlink" title="1.2 类的相互关系"></a>1.2 类的相互关系</h4><ul><li><p><code>ClassInfo</code> 包含多个 <code>ClassMember</code> 对象，通过 <code>_members</code> 列表进行管理。</p></li><li><p><code>ClassModel</code> 和 <code>MemberModel</code> 用于在视图中显示 <code>ClassInfo</code> 和 <code>ClassMember</code> 对象的信息，分别作为表格视图的模型。<code>UserModel</code> 用于显示用户信息，与用户管理窗口 <code>UserManagementWindow</code> 进行交互。</p></li><li><p><code>Utils</code> 提供辅助函数，被其他类和模块调用以实现功能，如账户验证、密码处理等。</p></li></ul><h3 id="2-Qt部分"><a href="#2-Qt部分" class="headerlink" title="2. Qt部分"></a>2. Qt部分</h3><h4 id="2-1使用的框架"><a href="#2-1使用的框架" class="headerlink" title="2.1使用的框架"></a>2.1使用的框架</h4><ul><li><p><strong>Qt Widgets</strong></p><ul><li><strong>功能:</strong> 提供传统的桌面应用程序界面组件，如窗口、按钮、文本框、对话框等。</li><li>**示例: ** <code>QWidget</code>, <code>QPushButton</code>, <code>QLineEdit</code>, <code>QTableView</code></li></ul></li><li><p><strong>Qt Core</strong></p><ul><li><strong>功能:</strong> 提供底层功能，包括事件处理、文件和数据流处理、时间管理、数据管理等。</li><li>**示例: ** <code>QIODevice</code>, <code>QMetaType</code>, <code>QFile</code>, <code>QDataStream</code></li></ul></li></ul><h4 id="2-2-UI设计"><a href="#2-2-UI设计" class="headerlink" title="2.2 UI设计"></a>2.2 UI设计</h4><h5 id="LoginWindow"><a href="#LoginWindow" class="headerlink" title="LoginWindow"></a>LoginWindow</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">private</span> slots:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onLoginButtonClicked</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 处理登录按钮点击事件</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onLanguageChanged</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span></span>; <span class="hljs-comment">// 处理语言选择变化事件</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onThemeChanged</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span></span>;  <span class="hljs-comment">// 处理主题切换事件</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setupUI</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 设置和初始化用户界面</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">updateUI</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 更新用户界面，包括语言和主题的变化</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">paintEvent</span><span class="hljs-params">(QPaintEvent *event)</span> <span class="hljs-keyword">override</span></span>; <span class="hljs-comment">// 重写的绘制事件，用于自定义背景渲染</span><br>    QLineEdit *_usernameLineEdit; <span class="hljs-comment">// 用户名输入框</span><br>    QLineEdit *_passwordLineEdit; <span class="hljs-comment">// 密码输入框</span><br>    QPushButton *_loginButton; <span class="hljs-comment">// 登录按钮</span><br>    QLabel *_titleLabel; <span class="hljs-comment">// 窗口标题标签</span><br>    QLabel *_usernameLabel; <span class="hljs-comment">// 用户名标签</span><br>    QLabel *_passwordLabel; <span class="hljs-comment">// 密码标签</span><br>    QPushButton *_chineseButton; <span class="hljs-comment">// 中文按钮</span><br>    QPushButton *_englishButton; <span class="hljs-comment">// 英文按钮</span><br>    QPushButton *_lightThemeButton; <span class="hljs-comment">// 亮主题按钮</span><br>    QPushButton *_darkThemeButton; <span class="hljs-comment">// 暗主题按钮</span><br>    <span class="hljs-type">bool</span> _nowTheme; <span class="hljs-comment">// 当前主题状态（`true` 表示暗主题，`false` 表示亮主题）</span><br></code></pre></td></tr></table></figure><p><strong>图例：</strong></p><p><img src="/./24%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1%E8%AF%BE%E8%AE%BE%E6%8A%A5%E5%91%8A/image-20240907001311126.png" alt="image-20240907001311126"></p><p><strong>相互关系：</strong></p><ul><li><strong><code>QLineEdit *_usernameLineEdit</code></strong> 和 <strong><code>QLineEdit *_passwordLineEdit</code></strong>:<ul><li><strong>功能</strong>: 分别用于输入用户名和密码。</li><li><strong>相互关系</strong>: 用户输入的用户名和密码将用于用户身份验证，当点击**<code>QPushButton *_loginButton</code>**时，系统会检验这些输入。</li></ul></li><li><strong><code>QPushButton *_loginButton</code></strong>:<ul><li><strong>功能</strong>: 提交用户输入的用户名和密码，触发登录操作。</li><li><strong>相互关系</strong>: 当点击此按钮时，**<code>onLoginButtonClicked()</code>**槽函数会被调用，用于处理登录逻辑。</li></ul></li><li><strong><code>QLabel *_titleLabel</code></strong>, <strong><code>QLabel *_usernameLabel</code></strong>, 和 <strong><code>QLabel *_passwordLabel</code></strong>:<ul><li><strong>功能</strong>: 显示窗口标题及输入框的标签。</li><li><strong>相互关系</strong>: 这些标签与**<code>QLineEdit</code>**控件配合，提供界面提示和说明。</li></ul></li><li><strong><code>QPushButton *_chineseButton</code></strong> 和 <strong><code>QPushButton *_englishButton</code></strong>:<ul><li><strong>功能</strong>: 提供直接的语言切换选项。</li><li><strong>相互关系</strong>: 用户点击这些按钮会切换界面语言，并触发**<code>onLanguageChanged(int index)</code>**槽函数。</li></ul></li><li><strong><code>QPushButton *_lightThemeButton</code></strong> 和 <strong><code>QPushButton *_darkThemeButton</code></strong>:<ul><li><strong>功能</strong>: 提供切换界面主题的选项。</li><li><strong>相互关系</strong>: 用户点击这些按钮会切换界面主题，并触发**<code>onThemeChanged(int index)</code>**槽函数。</li></ul></li><li><strong><code>QTranslator _translator</code></strong>:<ul><li><strong>功能</strong>: 用于加载和应用翻译文件，支持多语言界面。</li><li><strong>相互关系</strong>: 通过调用**<code>updateUI()</code><strong>函数来更新界面语言，</strong><code>_translator</code>**会根据用户选择的语言重新加载翻译文件。</li></ul></li></ul><h5 id="MainWindow"><a href="#MainWindow" class="headerlink" title="MainWindow"></a>MainWindow</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 根据 ID 移除类</span><br>    <span class="hljs-comment">// @param id 要移除的类的 ID</span><br>    <span class="hljs-comment">// @return 如果成功移除返回 true，否则返回 false</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">removeById</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> id)</span></span>;<br>    <span class="hljs-comment">// 根据 ID 查找类</span><br>    <span class="hljs-comment">// @param classes 要搜索的 ClassInfo 对象列表</span><br>    <span class="hljs-comment">// @param id 要查找的类的 ID</span><br>    <span class="hljs-comment">// @return 查找到的 ClassInfo 对象的引用</span><br>    <span class="hljs-function">ClassInfo&amp; <span class="hljs-title">findClassById</span><span class="hljs-params">(QList&lt;ClassInfo&gt;&amp; classes, <span class="hljs-type">const</span> <span class="hljs-type">int</span> id)</span></span>;<br><span class="hljs-keyword">private</span> slots:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onAddClass</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 处理添加新类的操作</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onSaveData</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 保存类数据为 Dat 格式</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onLoadData</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 加载类数据为 Dat 格式</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onSaveDataXML</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">// 保存类数据为 XML 格式</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onLoadDataXML</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 从 XML 文件加载类数据</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onSaveDataJSON</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 保存类数据为 JSON 格式</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onLoadDataJSON</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 从 JSON 文件加载类数据</span><br>    <span class="hljs-comment">// 处理表格单元格点击事件</span><br>    <span class="hljs-comment">// @param index 被点击单元格的索引</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onCellClicked</span><span class="hljs-params">(<span class="hljs-type">const</span> QModelIndex &amp;index)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onBackToLogin</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 返回登录窗口</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onSearchClicked</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 处理搜索按钮点击事件</span><br>    <span class="hljs-comment">// 处理搜索完成事件</span><br>    <span class="hljs-comment">// @param filteredClasses 符合搜索条件的类列表</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">handleSearchCompleted</span><span class="hljs-params">(<span class="hljs-type">const</span> QList&lt;ClassInfo&gt; &amp;filteredClasses)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onCancelSearch</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 处理搜索取消事件</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">updateUI</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 更新 UI 元素</span><br>    QList&lt;ClassInfo&gt; _classes; <span class="hljs-comment">// 管理的 ClassInfo 对象列表</span><br>    QList&lt;ClassInfo&gt; _classes_T; <span class="hljs-comment">// 临时存储的 ClassInfo 对象列表，用于搜索等操作</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setupToolbar</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 设置工具栏</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">displayClasses</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 显示类列表</span><br>    <span class="hljs-comment">// 显示选定类的成员</span><br>    <span class="hljs-comment">// @param classInfo 要显示成员的 ClassInfo 对象</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">displayMembers</span><span class="hljs-params">(<span class="hljs-type">const</span> ClassInfo&amp; classInfo)</span></span>;<br>    QTableView* _tableView; <span class="hljs-comment">// 表格视图控件</span><br>    <span class="hljs-type">bool</span> _searchMode = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 标识是否处于搜索模式</span><br>    QPushButton *_searchButton; <span class="hljs-comment">// 搜索按钮</span><br></code></pre></td></tr></table></figure><p><strong>图例：</strong></p><p><img src="/./24%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1%E8%AF%BE%E8%AE%BE%E6%8A%A5%E5%91%8A/image-20240907001356860.png" alt="image-20240907001356860"></p><p><strong>相互关系：</strong></p><ul><li><p><strong><code>QList&lt;ClassInfo&gt; _classes</code></strong> 和 <strong><code>QList&lt;ClassInfo&gt; _classes_T</code></strong>:</p><ul><li><strong>功能</strong>: 存储类信息的列表，用于管理和展示类数据。</li><li><strong>相互关系</strong>: <strong><code>_classes</code></strong> 用于存储当前的类信息列表，**<code>_classes_T</code>** 用于临时存储在搜索或其他操作中的类信息。</li></ul></li><li><p><strong><code>QTableView *_tableView</code></strong>:</p><ul><li><strong>功能</strong>: 用于显示类信息和成员信息的表格视图。</li><li><strong>相互关系</strong>: 与 <strong><code>MemberModel</code></strong> 结合，显示 <strong><code>ClassInfo</code></strong> 和 <strong><code>ClassMember</code></strong> 的数据。通过调用 <strong><code>displayClasses()</code></strong> 和 <strong><code>displayMembers(const ClassInfo&amp; classInfo)</code></strong> 函数来更新视图。</li></ul></li><li><p><strong><code>QPushButton *_searchButton</code></strong>:</p><ul><li><strong>功能</strong>: 提供执行搜索操作的按钮。</li><li><strong>相互关系</strong>: 点击此按钮会触发 <strong><code>onSearchClicked()</code></strong> 槽函数，进行类信息的搜索，并更新显示的结果。</li></ul></li><li><p><strong><code>void displayClasses()</code></strong>:</p><ul><li><p><strong>功能</strong>: 显示所有类的信息。</p></li><li><p><strong>相互关系</strong>: 更新 <strong><code>_tableView</code></strong> 显示的内容，展示 <strong><code>_classes</code></strong> 列表中的所有类。</p></li></ul></li><li><p><strong><code>void displayMembers(const ClassInfo&amp; classInfo)</code></strong>:</p><ul><li><strong>功能</strong>: 显示指定类的成员信息。</li><li><strong>相互关系</strong>: 更新 <strong><code>_tableView</code></strong> 显示的内容，展示指定 <strong><code>ClassInfo</code></strong> 对象中的成员数据。</li></ul></li><li><p><strong><code>bool removeById(const int id)</code></strong>:</p><ul><li><strong>功能</strong>: 从 <strong><code>_classes</code></strong> 或 <strong><code>_classes_T</code></strong> 列表中删除指定 ID 的类信息。</li><li><strong>相互关系:</strong> 如果处于搜索模式，首先在 <strong><code>_classes_T</code></strong> 中查找并删除具有指定 ID 的类信息。随后，从 <strong><code>_classes</code></strong> 中查找并删除具有指定 ID 的类信息。</li></ul></li></ul><h5 id="UserManagementWindow"><a href="#UserManagementWindow" class="headerlink" title="UserManagementWindow"></a>UserManagementWindow</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">private</span> slots:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onAddUser</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 添加用户槽函数</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onDeleteUser</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 删除用户槽函数</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">saveUserData</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 保存用户数据槽函数</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onBackToLogin</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 返回登录界面槽函数</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setupUI</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 设置用户界面</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loadUserData</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 加载用户数据</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showUsers</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 显示用户列表</span><br>    QTableView *_tableView; <span class="hljs-comment">// 用户表格视图</span><br>    QPushButton *_addButton; <span class="hljs-comment">// 添加用户按钮</span><br>    QPushButton *_deleteButton; <span class="hljs-comment">// 删除用户按钮</span><br>    QPushButton *_saveButton; <span class="hljs-comment">// 保存用户数据按钮</span><br>    QLineEdit *_usernameEdit; <span class="hljs-comment">// 用户名输入框</span><br>    QLineEdit *_passwordEdit; <span class="hljs-comment">// 密码输入框</span><br>    QPushButton *_backToLogin; <span class="hljs-comment">// 返回登录界面按钮</span><br>    QList&lt;QPair&lt;QString, QString&gt;&gt; _users; <span class="hljs-comment">// 存储用户信息的列表（用户名和密码的键值对）</span><br></code></pre></td></tr></table></figure><p><strong>图例：</strong></p><img src="./24暑期学校课设报告/image-20240907001731554.png" alt="image-20240907001731554" style="zoom:50%;" /><p><strong>相互关系：</strong></p><ul><li><p><strong><code>QTableView *_tableView</code></strong>:</p><ul><li><strong>功能</strong>: 显示用户信息的表格视图。</li><li><strong>相互关系</strong>: 与 <code>UserModel</code> 关联，用于展示 <code>QList&lt;QPair&lt;QString, QString&gt;&gt; _users</code> 中的用户数据。<code>showUsers()</code> 函数负责更新该视图的内容。</li></ul></li><li><p><strong><code>QPushButton *_addButton</code></strong>:</p><ul><li><strong>功能</strong>: 添加新用户。</li><li><strong>相互关系</strong>: 当点击此按钮时，<code>onAddUser()</code> 槽函数会被调用，允许用户输入新用户的用户名和密码，并将其添加到 <code>_users</code> 列表中。</li></ul></li><li><p><strong><code>QPushButton *_deleteButton</code></strong>:</p><ul><li><strong>功能</strong>: 删除选中的用户。</li><li><strong>相互关系</strong>: 当点击此按钮时，<code>onDeleteUser()</code> 槽函数会被调用，删除表格视图中选中的用户项，同时从 <code>_users</code> 列表中移除对应的用户。</li></ul></li><li><p><strong><code>QPushButton *_saveButton</code></strong>:</p><ul><li><strong>功能</strong>: 保存用户数据到文件<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="程序执行初，会在系统Documents目录创建`/OOPM/passports/`文件夹，文件指该路径下的users.bat文件">[1]</span></a></sup>。</li><li><strong>相互关系</strong>: 当点击此按钮时，<code>saveUserData()</code> 槽函数会被调用，将 <code>_users</code> 列表中的用户数据保存到持久化存储中（如文件）。</li></ul></li><li><p><strong><code>QLineEdit *_usernameEdit</code></strong>:</p><ul><li><strong>功能</strong>: 输入新用户的用户名。</li><li><strong>相互关系</strong>: 与 <code>QPushButton *_addButton</code> 配合使用，用户输入的用户名将用于 <code>onAddUser()</code> 函数中添加新用户。</li></ul></li><li><p><strong><code>QLineEdit *_passwordEdit</code></strong>:</p><ul><li><strong>功能</strong>: 输入新用户的密码。</li><li><strong>相互关系</strong>: 与 <code>QPushButton *_addButton</code> 配合使用，用户输入的密码将用于 <code>onAddUser()</code> 函数中添加新用户。</li></ul></li><li><p><strong><code>QPushButton *_backToLogin</code></strong>:</p><ul><li><strong>功能</strong>: 返回登录界面。</li><li><strong>相互关系</strong>: 当点击此按钮时，<code>onBackToLogin()</code> 槽函数会被调用，保存用户数据到文件，关闭当前的 <code>UserManagementWindow</code> 并返回到登录界面。</li></ul></li><li><p><strong><code>QList&lt;QPair&lt;QString, QString&gt;&gt; _users</code></strong>:</p><ul><li><strong>功能</strong>: 存储用户的用户名和密码。</li><li><strong>相互关系</strong>: 与 <code>QTableView *_tableView</code> 和 <code>UserModel</code> 关联，<code>_users</code> 列表中的数据通过 <code>showUsers()</code> 函数展示在表格视图中，并且可以被 <code>onAddUser()</code> 和 <code>onDeleteUser()</code> 操作。</li></ul></li></ul><h5 id="CreateClassDialog"><a href="#CreateClassDialog" class="headerlink" title="CreateClassDialog"></a>CreateClassDialog</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 构造函数，初始化对话框，并设置类信息和模式</span><br>    <span class="hljs-built_in">CreateClassDialog</span>(QWidget *parent = <span class="hljs-literal">nullptr</span>, <span class="hljs-type">const</span> QList&lt;ClassInfo&gt; &amp;classes = &#123;&#125;, <span class="hljs-type">const</span> ClassInfo &amp;classInfo = <span class="hljs-built_in">ClassInfo</span>(), <span class="hljs-type">const</span> <span class="hljs-type">bool</span> isModifyMode = <span class="hljs-literal">false</span>);<br>    <span class="hljs-function">ClassInfo <span class="hljs-title">getClassInfo</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>; <span class="hljs-comment">// 获取当前编辑的类信息</span><br><span class="hljs-keyword">private</span> slots:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onAddMemberClicked</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 添加成员按钮点击事件处理</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onMemberClicked</span><span class="hljs-params">(QListWidgetItem *item)</span></span>; <span class="hljs-comment">// 成员列表项点击事件处理</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onIdChanged</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;text)</span></span>; <span class="hljs-comment">// 类ID变化事件处理</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onNameChanged</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;text)</span></span>; <span class="hljs-comment">// 类名称变化事件处理</span><br><span class="hljs-keyword">private</span>:<br>    QLineEdit *_idEdit; <span class="hljs-comment">// 类ID输入框</span><br>    QLineEdit *_nameEdit; <span class="hljs-comment">// 类名称输入框</span><br>    QLineEdit *_baseClassNameEdit; <span class="hljs-comment">// 基类名称输入框</span><br>    QTextEdit *_functionEdit; <span class="hljs-comment">// 类功能描述输入框</span><br>    QDateTimeEdit *_creationDateEdit; <span class="hljs-comment">// 创建日期选择框</span><br>    QLineEdit *_authorEdit; <span class="hljs-comment">// 作者输入框</span><br>    QListWidget *_membersListWidget; <span class="hljs-comment">// 成员列表控件</span><br>    QLabel *_idWarningLabel; <span class="hljs-comment">// 类ID警告标签</span><br>    QLabel *_nameWarningLabel; <span class="hljs-comment">// 类名称警告标签</span><br>    QList&lt;ClassMember&gt; _members; <span class="hljs-comment">// 类成员列表</span><br>    QPushButton *_createButton; <span class="hljs-comment">// 创建按钮</span><br>    <span class="hljs-type">bool</span> _isModifyMode; <span class="hljs-comment">// 标记是否为修改模式</span><br>    <span class="hljs-type">const</span> QList&lt;ClassInfo&gt; &amp;_classes; <span class="hljs-comment">// 所有类的信息列表</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isIdExists</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 检查ID是否存在</span><br></code></pre></td></tr></table></figure><p><strong>图例：</strong></p><img src="./24暑期学校课设报告/image-20240907001909653.png" alt="image-20240907001909653" style="zoom:50%;" /><p><strong>相互关系：</strong></p><ul><li><p><strong><code>QLineEdit *_idEdit</code></strong> 和 <strong><code>QLineEdit *_nameEdit</code></strong>:</p><ul><li><strong>功能</strong>: 用于输入类的ID和名称。</li><li><strong>相互关系</strong>: 这些输入框的内容会影响类的唯一标识和名称，<code>onIdChanged(const QString &amp;text)</code> 和 <code>onNameChanged(const QString &amp;text)</code> 槽函数会根据这些输入实时更新界面或检查有效性。</li></ul></li><li><p><strong><code>QLineEdit *_baseClassNameEdit</code></strong> 和 <strong><code>QTextEdit *_functionEdit</code></strong>:</p><ul><li><strong>功能</strong>: 用于输入基类名称和类功能描述。</li><li><strong>相互关系</strong>: 这些输入框提供额外的类信息，影响类的描述和功能。</li></ul></li><li><p><strong><code>QDateTimeEdit *_creationDateEdit</code></strong> 和 <strong><code>QLineEdit *_authorEdit</code></strong>:</p><ul><li><strong>功能</strong>: 用于选择创建日期和输入作者信息。</li><li><strong>相互关系</strong>: 提供类创建的时间戳和作者信息，帮助记录和管理类的创建信息。</li></ul></li><li><p><strong><code>QListWidget *_membersListWidget</code></strong>:</p><ul><li><strong>功能</strong>: 显示类的成员列表。</li><li><strong>相互关系</strong>: 显示当前类的所有成员，用户可以通过 <code>onMemberClicked(QListWidgetItem *item)</code> 槽函数来选择或编辑成员。</li></ul></li><li><p><strong><code>QLabel *_idWarningLabel</code></strong> 和 <strong><code>QLabel *_nameWarningLabel</code></strong>:</p><ul><li><strong>功能</strong>: 显示类ID和名称的警告信息。</li><li><strong>相互关系</strong>: 提供输入验证的反馈信息，确保类ID和名称的唯一性和有效性。</li></ul></li><li><p><strong><code>QPushButton *_createButton</code></strong>:</p><ul><li><strong>功能</strong>: 提交创建或修改类的信息。</li><li><strong>相互关系</strong>: 触发对话框的创建或更新操作，根据 <code>_isModifyMode</code> 标志来决定是创建新类还是修改现有类。</li></ul></li><li><p><strong><code>const QList&lt;ClassInfo&gt; &amp;_classes</code></strong>:</p><ul><li><strong>功能</strong>: 存储所有类的信息，用于验证新类的ID是否已存在。</li><li><strong>相互关系</strong>: 提供所有已存在类的信息，以确保新类的ID唯一性，通过 <code>isIdExists()</code> 函数检查ID是否重复。</li></ul></li></ul><h5 id="CreateMemberDialog"><a href="#CreateMemberDialog" class="headerlink" title="CreateMemberDialog"></a>CreateMemberDialog</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">CreateMemberDialog</span><span class="hljs-params">(QWidget *parent = <span class="hljs-literal">nullptr</span>, <span class="hljs-type">const</span> QList&lt;ClassMember&gt; &amp;members = &#123;&#125;, <span class="hljs-type">const</span> ClassMember &amp;member = ClassMember(), <span class="hljs-type">bool</span> isModifyMode = <span class="hljs-literal">false</span>)</span></span>; <span class="hljs-comment">// 构造函数，初始化对话框，设置成员信息和模式</span><br>    <span class="hljs-function">ClassMember <span class="hljs-title">getClassMember</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>; <span class="hljs-comment">// 获取当前编辑的成员信息</span><br><span class="hljs-keyword">private</span> slots:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onMemberTypeChanged</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 成员类型变化事件处理</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onDataTypeChanged</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 数据类型变化事件处理</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onIdChanged</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;text)</span></span>; <span class="hljs-comment">// 成员ID变化事件处理</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onNameChanged</span><span class="hljs-params">(<span class="hljs-type">const</span> QString &amp;text)</span></span>; <span class="hljs-comment">// 成员名称变化事件处理</span><br><span class="hljs-keyword">private</span>:<br>    QLineEdit *_idEdit; <span class="hljs-comment">// 成员ID输入框</span><br>    QLineEdit *_nameEdit; <span class="hljs-comment">// 成员名称输入框</span><br>    QComboBox *_memberTypeComboBox; <span class="hljs-comment">// 成员类型下拉框</span><br>    QSpinBox *_memorySizeSpinBox; <span class="hljs-comment">// 内存大小输入框</span><br>    QComboBox *_dataTypeComboBox; <span class="hljs-comment">// 数据类型下拉框</span><br>    QComboBox *_accessibilityComboBox; <span class="hljs-comment">// 可访问性下拉框</span><br>    <span class="hljs-type">const</span> QList&lt;ClassMember&gt; &amp;_members; <span class="hljs-comment">// 所有成员的信息列表</span><br>    <span class="hljs-type">bool</span> _isModifyMode; <span class="hljs-comment">// 标记是否为修改模式</span><br>    QPushButton *_createButton; <span class="hljs-comment">// 创建按钮</span><br>    QLabel *_idWarningLabel; <span class="hljs-comment">// 成员ID警告标签</span><br>    QLabel *_nameWarningLabel; <span class="hljs-comment">// 成员名称警告标签</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isIdExists</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 检查ID是否存在</span><br></code></pre></td></tr></table></figure><p><strong>图例：</strong></p><img src="./24暑期学校课设报告/image-20240907001943423.png" alt="image-20240907001943423" style="zoom:50%;" /><p><strong>相互关系：</strong></p><ul><li><p><strong><code>QLineEdit *_idEdit</code></strong> 和 <strong><code>QLineEdit *_nameEdit</code></strong>:</p><ul><li><strong>功能</strong>: 用于输入成员的ID和名称。</li><li><strong>相互关系</strong>: 这些输入框的内容影响成员的唯一标识和名称，<code>onIdChanged(const QString &amp;text)</code> 和 <code>onNameChanged(const QString &amp;text)</code> 槽函数会根据这些输入实时更新界面或检查有效性。</li></ul></li><li><p><strong><code>QComboBox *_memberTypeComboBox</code></strong> 和 <strong><code>QComboBox *_dataTypeComboBox</code></strong>:</p><ul><li><strong>功能</strong>: 用于选择成员类型和数据类型。</li><li><strong>相互关系</strong>: 这些下拉框提供成员的额外信息，<code>onMemberTypeChanged()</code> 和 <code>onDataTypeChanged()</code> 槽函数处理这些选择的变化并更新相关的UI元素或数据。</li></ul></li><li><p><strong><code>QSpinBox *_memorySizeSpinBox</code></strong>:</p><ul><li><strong>功能</strong>: 输入或选择成员的内存大小。</li><li><strong>相互关系</strong>: 该控件的值影响成员的内存分配，确保数据准确，处理内存大小的更改涉及到对其他属性的调整。</li></ul></li><li><p><strong><code>QComboBox *_accessibilityComboBox</code></strong>:</p><ul><li><strong>功能</strong>: 选择成员的可访问性（公有、私有、保护）。</li><li><strong>相互关系</strong>: 提供成员的访问控制信息，影响类成员的访问权限。</li></ul></li><li><p><strong><code>QPushButton *_createButton</code></strong>:</p><ul><li><strong>功能</strong>: 提交创建或修改成员的信息。</li><li><strong>相互关系</strong>: 触发对话框的创建或更新操作，根据 <code>_isModifyMode</code> 标志来决定是创建新成员还是修改现有成员。</li></ul></li><li><p><strong><code>QLabel *_idWarningLabel</code></strong> 和 <strong><code>QLabel *_nameWarningLabel</code></strong>:</p><ul><li><strong>功能</strong>: 显示成员ID和名称的警告信息。</li><li><strong>相互关系</strong>: 提供输入验证的反馈信息，确保成员ID和名称的唯一性和有效性。</li></ul></li><li><p><strong><code>const QList&lt;ClassMember&gt; &amp;_members</code></strong>:</p><ul><li><strong>功能</strong>: 存储所有成员的信息，用于验证新成员的ID是否已存在。</li><li><strong>相互关系</strong>: 提供所有已存在成员的信息，以确保新成员的ID唯一性，通过 <code>isIdExists()</code> 函数检查ID是否重复。</li></ul></li></ul><h5 id="MemberDetailsDialog"><a href="#MemberDetailsDialog" class="headerlink" title="MemberDetailsDialog"></a>MemberDetailsDialog</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">MemberDetailsDialog</span><span class="hljs-params">(<span class="hljs-type">const</span> ClassMember &amp;member, QWidget *parent = <span class="hljs-literal">nullptr</span>)</span></span>; <span class="hljs-comment">// 构造函数，初始化对话框并显示成员详情</span><br>signals:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">memberDeleted</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 成员删除信号，删除操作后发出该信号</span><br><span class="hljs-keyword">private</span> slots:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onDeleteButtonClicked</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 处理删除按钮点击事件</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onReturnButtonClicked</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 处理返回按钮点击事件</span><br><span class="hljs-keyword">private</span>:<br>    QLabel *_memberDetailsLabel; <span class="hljs-comment">// 显示成员详细信息的标签</span><br>    QPushButton *_deleteButton; <span class="hljs-comment">// 删除按钮</span><br>    QPushButton *_returnButton; <span class="hljs-comment">// 返回按钮</span><br>    ClassMember _member; <span class="hljs-comment">// 当前显示的成员信息</span><br></code></pre></td></tr></table></figure><p><strong>图例：</strong></p><img src="./24暑期学校课设报告/image-20240907002251609.png" alt="image-20240907002251609" style="zoom:50%;" /><p><strong>相互关系：</strong></p><ul><li><p><strong><code>QLabel *_memberDetailsLabel</code></strong>:</p><ul><li><strong>功能</strong>: 用于显示成员的详细信息。</li><li><strong>相互关系</strong>: 该标签通过 <code>_member</code> 数据显示成员的各项属性，帮助用户查看成员详情。</li></ul></li><li><p><strong><code>QPushButton *_deleteButton</code></strong>:</p><ul><li><strong>功能</strong>: 提供删除当前显示成员的功能。</li><li><strong>相互关系</strong>: 当用户点击该按钮时，会调用 <code>onDeleteButtonClicked()</code> 槽函数，执行删除操作，并发出 <code>memberDeleted()</code> 信号，通知其他组件成员已被删除。</li></ul></li><li><p><strong><code>QPushButton *_returnButton</code></strong>:</p><ul><li><strong>功能</strong>: 返回上一级或关闭当前对话框。</li><li><strong>相互关系</strong>: 用户点击此按钮时，会调用 <code>onReturnButtonClicked()</code> 槽函数，关闭对话框或返回上一级界面。</li></ul></li><li><p><strong><code>ClassMember _member</code></strong>:</p><ul><li><strong>功能</strong>: 存储当前显示的成员信息。</li><li><strong>相互关系</strong>: 该成员变量用于在界面中展示成员详情，并在需要时执行删除操作，确保界面显示的信息与数据保持一致。</li></ul></li></ul><h5 id="MembersDetailDialog"><a href="#MembersDetailDialog" class="headerlink" title="MembersDetailDialog"></a>MembersDetailDialog</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">MembersDetailDialog</span><span class="hljs-params">(QList&lt;ClassMember&gt; &amp;members, QWidget *parent = <span class="hljs-literal">nullptr</span>)</span></span>; <span class="hljs-comment">// 构造函数，初始化对话框并显示成员列表</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showMembers</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 显示成员列表</span><br>    <span class="hljs-function">QList&lt;ClassMember&gt; <span class="hljs-type">const</span> <span class="hljs-title">getMembers</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> _members; &#125; <span class="hljs-comment">// 获取成员列表</span><br><span class="hljs-keyword">private</span> slots:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onAddMember</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 处理添加成员操作</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onCellClicked</span><span class="hljs-params">(<span class="hljs-type">const</span> QModelIndex &amp;index)</span></span>; <span class="hljs-comment">// 处理表格单元格点击事件</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">updateTotalSize</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 更新成员总大小标签</span><br><span class="hljs-keyword">private</span>:<br>    QList&lt;ClassMember&gt; _members; <span class="hljs-comment">// 成员列表</span><br>    QTableView *_tableView; <span class="hljs-comment">// 显示成员的表格视图</span><br>    MemberModel *_model; <span class="hljs-comment">// 成员数据模型，用于管理表格数据</span><br>    QLabel *_totalSizeLabel; <span class="hljs-comment">// 显示成员总大小的标签</span><br></code></pre></td></tr></table></figure><p><strong>图例：</strong></p><p><img src="/./24%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1%E8%AF%BE%E8%AE%BE%E6%8A%A5%E5%91%8A/image-20240907002436977.png" alt="image-20240907002436977"></p><p><strong>相互关系：</strong></p><ul><li><p><strong><code>QList&lt;ClassMember&gt; _members</code></strong>:</p><ul><li><strong>功能</strong>: 存储所有成员的信息。</li><li><strong>相互关系</strong>: 该列表中的成员信息用于在表格视图中显示，并由 <code>_model</code> 数据模型管理，更新操作通过 <code>onAddMember()</code> 和 <code>onCellClicked()</code> 等槽函数影响成员列表的内容。</li></ul></li><li><p><strong><code>QTableView *_tableView</code></strong>:</p><ul><li><strong>功能</strong>: 用于在界面中以表格形式显示成员信息。</li><li><strong>相互关系</strong>: 该视图通过 <code>_model</code> 数据模型显示 <code>_members</code> 列表中的内容。用户点击表格中的某个单元格时，会触发 <code>onCellClicked()</code> 槽函数，进行相应处理。</li></ul></li><li><p><strong><code>MemberModel *_model</code></strong>:</p><ul><li><strong>功能</strong>: 管理成员数据的模型，负责向表格视图提供数据。</li><li><strong>相互关系</strong>: 该模型与 <code>_tableView</code> 直接关联，确保表格显示的数据与 <code>_members</code> 列表一致。每次成员列表更新后，表格内容也会随之更新。</li></ul></li><li><p><strong><code>QLabel *_totalSizeLabel</code></strong>:</p><ul><li><strong>功能</strong>: 显示所有成员的总内存大小。</li><li><strong>相互关系</strong>: 通过 <code>updateTotalSize()</code> 函数计算并更新该标签的内容，以反映当前成员列表中的总内存大小信息。</li></ul></li></ul><h5 id="SearchDialog"><a href="#SearchDialog" class="headerlink" title="SearchDialog"></a>SearchDialog</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">SearchDialog</span>(<span class="hljs-type">const</span> QList&lt;ClassInfo&gt; &amp;classes, QWidget *parent = <span class="hljs-literal">nullptr</span>); <span class="hljs-comment">// 构造函数，初始化搜索对话框并传入类信息列表</span><br>signals:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">searchCompleted</span><span class="hljs-params">(<span class="hljs-type">const</span> QList&lt;ClassInfo&gt; &amp;filteredClasses)</span></span>; <span class="hljs-comment">// 发出搜索完成信号，并传递过滤后的类信息列表</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cancelSearch</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 发出取消搜索的信号</span><br><span class="hljs-keyword">private</span> slots:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onSearch</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 处理搜索操作</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onCancel</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 处理取消操作</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onDateTimeChange</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 处理日期范围变化事件</span><br><span class="hljs-keyword">private</span>:<br>QLineEdit *_idEdit; <span class="hljs-comment">// 用于输入类id的编辑框</span><br>    QLineEdit *_nameEdit; <span class="hljs-comment">// 用于输入类名称的编辑框</span><br>    QLineEdit *_authorEdit; <span class="hljs-comment">// 用于输入作者名称的编辑框</span><br>    QComboBox *_dateRangeComboBox; <span class="hljs-comment">// 用于选择日期范围的下拉框</span><br>    QDateTimeEdit *_startDateEdit; <span class="hljs-comment">// 用于选择开始日期的日期时间编辑框</span><br>    QDateTimeEdit *_endDateEdit; <span class="hljs-comment">// 用于选择结束日期的日期时间编辑框</span><br>    QPushButton *_searchButton; <span class="hljs-comment">// 触发搜索操作的按钮</span><br>    QPushButton *_cancelButton; <span class="hljs-comment">// 触发取消操作的按钮</span><br>    QList&lt;ClassInfo&gt; _classes; <span class="hljs-comment">// 存储原始的类信息列表</span><br></code></pre></td></tr></table></figure><p><strong>图例：</strong></p><p><img src="/./24%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1%E8%AF%BE%E8%AE%BE%E6%8A%A5%E5%91%8A/image-20240907002526750.png" alt="image-20240907002526750"></p><p><strong>相互关系：</strong></p><ul><li><p><strong><code>QLineEdit *_nameEdit</code></strong> 和 <strong><code>QLineEdit *_authorEdit</code></strong>:</p><ul><li><strong>功能</strong>: 分别用于输入类名和作者名。</li><li><strong>相互关系</strong>: 这些输入框中的文本在用户点击**<code>_searchButton</code>**时被读取，用于过滤类信息列表 <code>_classes</code>，并调用 <code>onSearch()</code> 进行搜索操作。</li></ul></li><li><p><strong><code>QComboBox *_dateRangeComboBox</code><strong>、</strong><code>QDateTimeEdit *_startDateEdit</code></strong> 和 <strong><code>QDateTimeEdit *_endDateEdit</code></strong>:</p><ul><li><strong>功能</strong>: 用于选择和输入搜索时的日期范围。</li><li><strong>相互关系</strong>: 用户选择或修改日期范围时，会触发 <code>onDateTimeChange()</code>，调整开始和结束日期的可选范围，以保证搜索条件的有效性。</li></ul></li><li><p><strong><code>QPushButton *_searchButton</code></strong>:</p><ul><li><strong>功能</strong>: 触发搜索操作。</li><li><strong>相互关系</strong>: 用户点击该按钮时，会调用 <code>onSearch()</code> 槽函数，使用输入框和日期选择器的内容来过滤 <code>_classes</code> 列表，并通过 <code>searchCompleted()</code> 信号返回过滤后的结果。</li></ul></li><li><p><strong><code>QPushButton *_cancelButton</code></strong>:</p><ul><li><strong>功能</strong>: 取消当前搜索操作并关闭对话框。</li><li><strong>相互关系</strong>: 点击该按钮时，会调用 <code>onCancel()</code> 槽函数，发出 <code>cancelSearch()</code> 信号以通知搜索被取消，同时关闭对话框。</li></ul></li><li><p><strong><code>QList&lt;ClassInfo&gt; _classes</code></strong>:</p><ul><li><strong>功能</strong>: 存储原始的类信息列表，用于搜索和过滤。</li><li><strong>相互关系</strong>: 该列表中的数据通过 <code>onSearch()</code> 进行过滤，并在搜索完成后通过 <code>searchCompleted()</code> 信号传递给调用者。</li></ul></li></ul><h3 id="3-程序所完成的功能"><a href="#3-程序所完成的功能" class="headerlink" title="3. 程序所完成的功能"></a>3. 程序所完成的功能</h3><ol><li><p><strong>创建和管理类信息的对象</strong></p><p>使用 <code>ClassInfo</code> 实例化类，使用 <code>ClassModel</code> 与 <code>MainWindow</code> 中的表格实现对类的展示。</p></li><li><p><strong>创建和管理类成员信息的对象</strong></p><p>使用 <code>ClassMember</code> 实例化类，使用 <code>MemberModel</code> 与 <code>MembersDetailDialog</code> 中的表格实现对成员的展示。</p></li><li><p><strong>增加和删除类</strong></p><p>在 <code>MainWindow</code> 中操作相关控件实现。</p></li><li><p><strong>针对特定类增加或删除类成员信息</strong></p><p>在 <code>MainWindow</code> 中点击特定类的类成员信息打开 <code>MembersDetailDialog</code> 来增删改。</p></li><li><p><strong>基本查询功能</strong></p><p>在 <code>MainWindow</code> 工具栏中点击 <code>Search</code> 控件，实现id，名称，作者，时间的多重筛选查询。</p></li><li><p><strong>数据文件读写</strong></p><p>在 <code>MainWindow</code> 工具栏中点击相应文件菜单，实现对应操作。</p></li><li><p><strong>基本信息显示</strong></p><p>在 <code>MainWindow</code> 中使用表格直观展示信息。</p></li></ol><h3 id="4-额外实现的功能"><a href="#4-额外实现的功能" class="headerlink" title="4. 额外实现的功能"></a>4. 额外实现的功能</h3><ol><li><p><strong>多语言支持</strong>：</p><p>系统实现了通过 <code>QTranslator</code> 进行多语言切换的功能，允许用户选择不同的界面语言。</p></li><li><p><strong>主题切换</strong>：</p><p>提供了明亮主题和黑暗主题的切换功能，用户可以通过按钮在不同的界面主题之间切换。</p></li><li><p><strong>多文件支持</strong>：</p><p>实现了Dat、XML、JSON文件的统一，可以进行数据互通。</p></li><li><p><strong>类和成员信息的修改功能</strong>：</p><p>可以直接修改已有的类和类成员信息，而无需先删除再重新添加，提升了系统的灵活性和用户体验。</p></li><li><p><strong>可行性验证</strong>：</p><p>在创建或编辑类和类成员时，系统提供了实时的ID与名称验证功能，防止重复ID的使用，防止ID与名称为空，并在发现错误时禁用创建按钮。</p></li><li><p><strong>多端协同</strong>：</p><p>实现了管理员和常规用户的分别登录，管理员，支持添加、删除、保存用户数据，用户进行类管理。</p></li><li><p><strong>密码哈希加密</strong>：</p><p>在用户登录功能中，密码进行了哈希加密<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="将密码转换为`QByteArray`，使用SHA-256算法生成哈希值，并将哈希值转换为十六进制字符串以便于存储和比较。">[2]</span></a></sup>存储和验证，增强了系统的安全性。</p></li></ol><h2 id="三、-文件格式描述"><a href="#三、-文件格式描述" class="headerlink" title="三、 文件格式描述"></a>三、 文件格式描述</h2><p><em>（详细描述所保存和读取的文件格式）</em></p><h3 id="1-JSON"><a href="#1-JSON" class="headerlink" title="1. JSON"></a>1. JSON</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;Author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Author1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;BaseClassName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BaseManager&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;CreationDate&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-08-01T10:00:00&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Function&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Handles data operations.&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;ID&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Members&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;Accessibility&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Public&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;DataType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Double&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;MemberID&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;MemberName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dataField&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;MemberType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Data&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;MemorySize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-comment">// other Member</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;DataManager&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">// other Class</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><ul><li><strong><code>Author</code></strong>: 记录创建类的作者信息。</li><li><strong><code>BaseClassName</code></strong>: 类的基类名称，如果当前类是从另一个类继承而来的，这里会显示基类的名称。</li><li><strong><code>CreationDate</code></strong>: 类的创建日期和时间，使用标准的 ISO 8601 日期格式（<code>YYYY-MM-DDTHH:MM:SS</code>）。</li><li><strong><code>Function</code></strong>: 描述类的主要功能或职责。</li><li><strong><code>ID</code></strong>: 类的唯一标识符，用于区分不同的类对象。</li><li><strong><code>Members</code></strong>: 存储类成员信息的数组，每个成员信息包括以下字段：<ul><li><strong><code>Accessibility</code></strong>: 成员的访问权限，如<code>Public</code>（公共）、<code>Private</code>（私有）、<code>Protected</code>（受保护）。</li><li><strong><code>DataType</code></strong>: 成员的数据类型，如 <code>Double</code>、<code>Int</code>、<code>String</code>等。</li><li><strong><code>MemberID</code></strong>: 成员的唯一标识符，用于区分不同的成员。</li><li><strong><code>MemberName</code></strong>: 成员的名称，通常是变量或函数的名称。</li><li><strong><code>MemberType</code></strong>: 成员类型，表示该成员是数据成员还是函数成员（例如 <code>Data</code> 或 <code>Function</code>）。</li><li><strong><code>MemorySize</code></strong>: 数据成员的内存大小（以字节为单位），函数成员通常为 <code>0</code>。</li></ul></li><li><strong><code>Name</code></strong>: 类的名称，用于标识和引用该类。</li></ul><h3 id="2-XML"><a href="#2-XML" class="headerlink" title="2. XML"></a>2. XML</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Classes</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">Class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ID</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">ID</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Name</span>&gt;</span>UserController<span class="hljs-tag">&lt;/<span class="hljs-name">Name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">BaseClassName</span>&gt;</span>BaseController<span class="hljs-tag">&lt;/<span class="hljs-name">BaseClassName</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Function</span>&gt;</span>Manages user-related functions.<span class="hljs-tag">&lt;/<span class="hljs-name">Function</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">CreationDate</span>&gt;</span>2024-08-02T11:00:00<span class="hljs-tag">&lt;/<span class="hljs-name">CreationDate</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Author</span>&gt;</span>Author2<span class="hljs-tag">&lt;/<span class="hljs-name">Author</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Members</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Member</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">MemberID</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">MemberID</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">MemberName</span>&gt;</span>userID<span class="hljs-tag">&lt;/<span class="hljs-name">MemberName</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">MemberType</span>&gt;</span>Data<span class="hljs-tag">&lt;/<span class="hljs-name">MemberType</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">MemorySize</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">MemorySize</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">DataType</span>&gt;</span>Int<span class="hljs-tag">&lt;/<span class="hljs-name">DataType</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">Accessibility</span>&gt;</span>Private<span class="hljs-tag">&lt;/<span class="hljs-name">Accessibility</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">Member</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">member</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- ... --&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">member</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Members</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Class</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- ... --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Classes</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong><code>&lt;Class&gt;</code></strong>: 表示一个类对象的整体信息，包含该类的所有属性和成员。<ul><li><strong><code>&lt;ID&gt;</code></strong>: 类的唯一标识符，用于区分不同的类对象。</li><li><strong><code>&lt;Name&gt;</code></strong>: 类的名称，用于标识和引用该类。</li><li><strong><code>&lt;BaseClassName&gt;</code></strong>: 类的基类名称，如果当前类是从另一个类继承而来的，这里会显示基类的名称。</li><li><strong><code>&lt;Function&gt;</code></strong>: 描述类的主要功能或职责。</li><li><strong><code>&lt;CreationDate&gt;</code></strong>: 类的创建日期和时间，使用标准的 ISO 8601 日期格式（<code>YYYY-MM-DDTHH:MM:SS</code>）。</li><li><strong><code>&lt;Author&gt;</code></strong>: 记录创建类的作者信息。</li><li><strong><code>&lt;Members&gt;</code></strong>: 存储类成员信息的集合标签，包含若干个 <code>&lt;Member&gt;</code> 标签，每个 <code>&lt;Member&gt;</code> 标签表示一个类成员。<ul><li><strong><code>&lt;Member&gt;</code></strong>: 描述类中的一个成员的具体信息。<ul><li><strong><code>&lt;MemberID&gt;</code></strong>: 成员的唯一标识符，用于区分不同的成员。</li><li><strong><code>&lt;MemberName&gt;</code></strong>: 成员的名称，通常是变量或函数的名称。</li><li><strong><code>&lt;MemberType&gt;</code></strong>: 成员类型，表示该成员是数据成员还是函数成员（例如 <code>Data</code> 或 <code>Function</code>）。</li><li><strong><code>&lt;MemorySize&gt;</code></strong>: 数据成员的内存大小（以字节为单位），函数成员通常为 <code>0</code>。</li><li><strong><code>&lt;DataType&gt;</code></strong>: 成员的数据类型，如 <code>Int</code>、<code>Void</code>、<code>String</code>等。</li><li><strong><code>&lt;Accessibility&gt;</code></strong>: 成员的访问权限，如 <code>Public</code>（公共）、<code>Private</code>（私有）、<code>Protected</code>（受保护）。</li></ul></li></ul></li></ul></li></ul><h3 id="3-Dat"><a href="#3-Dat" class="headerlink" title="3. Dat"></a>3. Dat</h3><ul><li><p>类数据块:</p><p>保存类的各个属性（ID、名称、基类名、功能、创建日期、作者）。</p><p>保存成员的数量。</p><p>依次保存每个成员的数据。</p></li><li><p>成员数据块:</p><p>保存成员的各个属性（ID、名称、类型、内存大小、数据类型、访问权限），其中枚举类型被转换为整数进行保存。</p></li></ul><h2 id="四、-具体实现过程"><a href="#四、-具体实现过程" class="headerlink" title="四、 具体实现过程"></a>四、 具体实现过程</h2><p><em>（详细描述按照什么顺序进行程序搭建，在实现中碰到的问题以及解决的方法）</em></p><h3 id="1-需求分析与规划阶段"><a href="#1-需求分析与规划阶段" class="headerlink" title="1. 需求分析与规划阶段"></a>1. 需求分析与规划阶段</h3><p>在开始程序的实现之前，首先进行了需求分析，以明确系统的功能需求、数据结构和用户界面。确定了以下主要功能：</p><ul><li>用户管理与登录</li><li>类和成员信息管理</li><li>数据的保存与加载（支持 XML、JSON 和 DAT 格式）</li><li>界面设计和用户交互</li></ul><h3 id="2-准备工具阶段"><a href="#2-准备工具阶段" class="headerlink" title="2. 准备工具阶段"></a>2. 准备工具阶段</h3><ul><li><p><strong>Qt Creator</strong>：使用 Qt Creator 作为主要的开发环境。虽然 Qt Creator 提供了可视化的 UI 设计器，但在这个项目中我决定完全使用代码编写 UI，以实现更高的自定义性和灵活性。</p></li><li><p><strong>Qt Linguist</strong>：选用 Qt Linguist来构建应用的翻译功能。这一工具帮助创建和管理多语言支持，允许在应用中动态切换语言，提升用户体验。</p></li><li><p><strong>Git 和 GitHub</strong>：使用 Git 进行版本控制，GitHub 作为远程仓库<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="远程仓库地址：[harkerhand/OOPM (github.com)](https://github.com/harkerhand/OOPM)">[3]</span></a></sup>来存储和管理代码。Git 的版本控制功能帮助跟踪代码变更历史，GitHub 提供了团队协作、代码审查和持续集成的支持。</p></li></ul><h3 id="3-设计阶段"><a href="#3-设计阶段" class="headerlink" title="3. 设计阶段"></a>3. 设计阶段</h3><h4 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h4><ol><li><p><strong><code>ClassInfo.h</code></strong> 和 <strong><code>ClassMember.h</code></strong>: </p><p>定义了表示类和类成员的信息，包括数据成员和方法。</p></li><li><p><strong><code>Utils.h</code></strong>:</p><p>包含了处理密码哈希加密、验证账户、保存用户数据等功能的声明。</p></li><li><p><strong><code>CreateClassDialog.h</code> 和 <code>CreateMemberDialog.h</code></strong>:</p><p>定义了创建类和类成员的对话框，包括处理用户输入的槽函数和界面元素。</p></li><li><p><strong><code>MemberDetailsDialog.h</code> 和 <code>MembersDetailDialog.h</code></strong>:</p><p>定义了显示单个与多个成员详细信息的对话框。</p></li><li><p><strong><code>SearchDialog.h</code></strong>:</p><p>定义了一个用于查询类信息的对话框，包含搜索条件和结果显示。</p></li><li><p><strong>其他UI类与辅助类</strong></p></li></ol><h3 id="4-实现阶段"><a href="#4-实现阶段" class="headerlink" title="4. 实现阶段"></a>4. 实现阶段</h3><h4 id="4-1-类实现"><a href="#4-1-类实现" class="headerlink" title="4.1 类实现"></a>4.1 类实现</h4><ol><li><p><strong>实现数据类</strong>：</p><p>在 <strong><code>ClassInfo.cpp</code></strong> 和 <strong><code>ClassMember.cpp</code></strong> 文件中，实现了类和类成员的具体功能，例如数据读写和保存到流等操作。</p></li><li><p><strong>实现用户数据模型</strong>：</p><p>在 <strong><code>UserModel.cpp</code></strong> 文件中，实现了 <code>QAbstractTableModel</code> 的各个方法，包括数据的显示和标题的处理。</p></li><li><p><strong>实现工具函数</strong>：</p><p>在 <strong><code>Utils.cpp</code></strong> 文件中，完成了密码哈希加密、账户验证等功能的实现，并处理了与文件读写相关的操作。</p></li><li><p><strong>实现对话框</strong>：</p><p><strong><code>CreateClassDialog.cpp</code> 和 <code>CreateMemberDialog.cpp</code></strong>: 实现了创建类和成员对话框的界面布局及槽函数。</p><p><strong><code>MemberDetailsDialog.cpp</code> 和 <code>MembersDetailDialog.cpp</code></strong>: 实现了显示成员详细信息和成员列表的对话框。</p><p><strong><code>SearchDialog.cpp</code></strong>: 实现了搜索功能的对话框，包括搜索和取消操作。</p></li><li><p><strong>实现窗口</strong>：</p><p>在 <strong><code>MainWindow.cpp</code></strong> 中，实现了主窗口的界面和功能，包括添加和删除类，显示类信息，处理文件读写等。</p><p>在 <strong><code>LoginWindow.cpp</code></strong> 中，实现了验证用户登录的用户名和密码，以及界面语言和主题切换。</p><p>在 <strong><code>UserManagementWindow.cpp</code></strong> 中，实现了管理用户信息，包括添加、删除用户，保存用户数据，显示用户列表及其详细信息。</p></li></ol><h4 id="4-2-主要功能实现"><a href="#4-2-主要功能实现" class="headerlink" title="4.2 主要功能实现"></a>4.2 主要功能实现</h4><ol><li><strong>创建和管理类与成员</strong>：<ul><li>使用 <strong><code>CreateClassDialog</code></strong> 和 <strong><code>CreateMemberDialog</code></strong> 来创建类和类成员。</li><li>使用 <strong><code>MembersDetailDialog</code></strong> 来查看和管理类成员的详细信息。</li></ul></li><li><strong>增加和删除功能</strong>：<ul><li>在 <strong><code>MainWindow</code></strong> 中实现了增加和删除类的功能。</li><li>对于类成员，使用 <strong><code>MembersDetailDialog</code></strong> 和 <strong><code>ClassInfo</code></strong> 中的方法来管理成员。</li></ul></li><li><strong>数据文件读写</strong>：<ul><li>实现了 XML、JSON 和 DAT 文件的读写操作。**<code>Utils.cpp</code>** 处理了文件的保存和加载操作，并确保了数据的正确性。</li></ul></li><li><strong>信息显示</strong>：<ul><li>使用 <strong><code>MainWindow</code></strong> 的表格视图和详细信息对话框来显示所有类的信息和特定类的成员信息。</li></ul></li><li><strong>额外功能</strong>：<ul><li>实现了密码哈希加密功能用于增强安全性。</li><li>增加了修改类和成员信息的功能，而不是删除和重新添加。</li></ul></li></ol><h3 id="5-测试阶段"><a href="#5-测试阶段" class="headerlink" title="5. 测试阶段"></a>5. 测试阶段</h3><p>单元测试：对各个模块进行了单元测试，包括类信息的保存与加载、数据模型的显示功能等。</p><p>集成测试：测试了不同模块之间的集成，包括 UI 与数据模型的交互、文件保存与加载的正确性。</p><p>调试：通过调试工具定位并修复了代码中的错误和问题，确保程序的稳定性和功能的完整性。</p><p><em>这部分将在下一节详细说明</em></p><h3 id="6-遇到的问题及解决方案"><a href="#6-遇到的问题及解决方案" class="headerlink" title="6. 遇到的问题及解决方案"></a>6. 遇到的问题及解决方案</h3><ol><li><strong>数据格式转换问题</strong>：<ul><li><strong>问题</strong>：在处理数据的 XML 和 JSON 格式时，出现了数据格式不匹配的问题。</li><li><strong>解决方案</strong>：通过详细阅读格式规范和实现相应的解析和序列化函数，确保了数据的正确读写。</li></ul></li><li><strong>界面刷新问题</strong>：<ul><li><strong>问题</strong>：在修改数据后，界面没有及时更新。</li><li><strong>解决方案</strong>：添加了界面更新的函数<code>updateUI()</code>，在数据修改后调用以刷新界面。</li></ul></li><li><strong>文件读写异常</strong>：<ul><li><strong>问题</strong>：在文件读写过程中，偶尔出现文件无法打开或数据读取错误。</li><li><strong>解决方案</strong>：增加了异常处理机制，确保文件操作的健壮性，并提供了用户友好的错误提示。</li></ul></li><li><strong>密码验证异常</strong>：<ul><li><strong>问题</strong>：在密码哈希存储过程中，如果读取到的密码哈希值被二次加密，可能会导致密码校验失败。</li><li><strong>解决方案</strong>:<ol><li><strong>长度验证</strong>：在保存和读取密码哈希值时，通过检查哈希值的长度来判断是否可能发生了二次加密。不同哈希算法生成的哈希值长度是固定的，因此可以利用哈希值的长度来确保哈希值没有被错误处理。</li><li><strong>存储和验证一致性</strong>：确保在存储和读取密码哈希时，哈希值只经过一次哈希处理。避免在存储后对哈希值进行任何额外的哈希处理，以确保密码校验时能够准确匹配。</li></ol></li></ul></li><li><strong>同一个界面用于创建与修改的复用问题</strong>：<ul><li><strong>问题</strong>：在一个界面中复用创建和修改对象的功能时，会遇到如何区分创建模式和修改模式的问题。</li><li><strong>解决方案</strong>:<ol><li><strong>动态按钮文本</strong>：使用条件表达式来设置按钮文本，根据当前操作模式（创建或修改）来更新按钮的显示文本。</li><li><strong>模式标识</strong>：在界面初始化时，通过参数或标识来确定当前是创建模式还是修改模式。</li><li><strong>功能适配</strong>：在按钮点击事件中，根据当前模式执行不同的逻辑。对于创建模式，执行创建操作；对于修改模式，执行更新操作。在代码中实现逻辑分支来处理不同的操作模式。</li><li><strong>用户提示</strong>：提供清晰的用户提示，确保用户知道当前操作的模式是什么。</li></ol></li></ul></li></ol><h2 id="五、-测试报告"><a href="#五、-测试报告" class="headerlink" title="五、 测试报告"></a>五、 测试报告</h2><p><em>（对主要功能进行测试，可以列表表示各项功能的完成情况，也可以贴图表示）</em></p><h3 id="1-用户登录功能"><a href="#1-用户登录功能" class="headerlink" title="1. 用户登录功能"></a>1. 用户登录功能</h3><table><thead><tr><th>测试内容</th><th>预期结果</th><th>实际结果</th><th>备注</th></tr></thead><tbody><tr><td>输入正确的用户名和密码登录</td><td>成功登录，进入主界面</td><td>成功登录</td><td>无问题</td></tr><tr><td>输入管理员的用户名和密码登录</td><td>成功登录，进入管理员界面</td><td>成功登录</td><td>无问题</td></tr><tr><td>输入错误的用户名和密码登录</td><td>登录失败，显示错误提示</td><td>正确显示错误提示</td><td>无问题</td></tr><tr><td>空用户名或密码登录</td><td>登录失败，显示错误提示</td><td>正确显示错误提示</td><td>无问题</td></tr></tbody></table><h3 id="2-类信息管理功能"><a href="#2-类信息管理功能" class="headerlink" title="2. 类信息管理功能"></a>2. 类信息管理功能</h3><table><thead><tr><th>测试内容</th><th>预期结果</th><th>实际结果</th><th>备注</th></tr></thead><tbody><tr><td>添加新的类信息</td><td>新类信息成功添加到列表中</td><td>添加成功</td><td>无问题</td></tr><tr><td>修改现有的类信息</td><td>类信息成功修改</td><td>修改成功</td><td>无问题</td></tr><tr><td>删除类信息</td><td>类信息成功删除</td><td>删除成功</td><td>无问题</td></tr><tr><td>显示类详细信息</td><td>正确显示类的详细信息</td><td>显示正确</td><td>无问题</td></tr></tbody></table><h3 id="3-成员信息管理功能"><a href="#3-成员信息管理功能" class="headerlink" title="3. 成员信息管理功能"></a>3. 成员信息管理功能</h3><table><thead><tr><th>测试内容</th><th>预期结果</th><th>实际结果</th><th>备注</th></tr></thead><tbody><tr><td>添加新的成员信息</td><td>新成员信息成功添加到列表中</td><td>添加成功</td><td>无问题</td></tr><tr><td>修改现有的成员信息</td><td>成员信息成功修改</td><td>修改成功</td><td>无问题</td></tr><tr><td>删除成员信息</td><td>成员信息成功删除</td><td>删除成功</td><td>无问题</td></tr><tr><td>显示成员详细信息</td><td>正确显示成员的详细信息</td><td>显示正确</td><td>无问题</td></tr></tbody></table><h3 id="4-数据保存与加载功能"><a href="#4-数据保存与加载功能" class="headerlink" title="4. 数据保存与加载功能"></a>4. 数据保存与加载功能</h3><table><thead><tr><th>测试内容</th><th>预期结果</th><th>实际结果</th><th>备注</th></tr></thead><tbody><tr><td>保存为 DAT 格式</td><td>正确保存数据为 DAT 文件</td><td>保存成功</td><td>无问题</td></tr><tr><td>保存为 XML 格式</td><td>正确保存数据为 XML 文件</td><td>保存成功</td><td>无问题</td></tr><tr><td>保存为 JSON 格式</td><td>正确保存数据为 JSON 文件</td><td>保存成功</td><td>无问题</td></tr><tr><td>加载 DAT 格式数据</td><td>正确加载 DAT 文件中的数据</td><td>加载成功</td><td>无问题</td></tr><tr><td>加载 XML 格式数据</td><td>正确加载 XML 文件中的数据</td><td>加载成功</td><td>无问题</td></tr><tr><td>加载 JSON 格式数据</td><td>正确加载 JSON 文件中的数据</td><td>加载成功</td><td>无问题</td></tr></tbody></table><h3 id="5-用户管理功能"><a href="#5-用户管理功能" class="headerlink" title="5. 用户管理功能"></a>5. 用户管理功能</h3><table><thead><tr><th>测试内容</th><th>预期结果</th><th>实际结果</th><th>备注</th></tr></thead><tbody><tr><td>添加用户</td><td>新用户成功添加到用户列表中</td><td>添加成功</td><td>无问题</td></tr><tr><td>删除用户</td><td>用户成功删除</td><td>删除成功</td><td>无问题</td></tr><tr><td>保存用户数据</td><td>用户数据成功保存</td><td>保存成功</td><td>无问题</td></tr><tr><td>显示用户列表</td><td>正确显示用户列表</td><td>显示正确</td><td>无问题</td></tr></tbody></table><h3 id="6-界面与交互功能"><a href="#6-界面与交互功能" class="headerlink" title="6. 界面与交互功能"></a>6. 界面与交互功能</h3><table><thead><tr><th>测试内容</th><th>预期结果</th><th>实际结果</th><th>备注</th></tr></thead><tbody><tr><td>界面控件功能</td><td>各个控件按预期功能工作</td><td>功能正常</td><td>无问题</td></tr><tr><td>界面布局与美观</td><td>界面布局合理，符合设计要求</td><td>布局合理</td><td>无问题</td></tr><tr><td>语言切换功能</td><td>界面语言切换成功</td><td>切换成功</td><td>无问题</td></tr><tr><td>主题切换功能</td><td>主题切换成功，界面显示正确</td><td>切换成功</td><td>无问题</td></tr></tbody></table><h3 id="7-结论"><a href="#7-结论" class="headerlink" title="7. 结论"></a>7. 结论</h3><p>所有主要功能经过测试均正常工作，程序的各项功能完成情况符合预期。没有发现严重的错误或问题，程序在Windows操作系统环境下表现稳定。</p><h2 id="六、-心得体会和相关建议"><a href="#六、-心得体会和相关建议" class="headerlink" title="六、 心得体会和相关建议"></a>六、 心得体会和相关建议</h2><p><em>（课程小结和对课程改进的建议）</em></p><h3 id="1-心得体会"><a href="#1-心得体会" class="headerlink" title="1. 心得体会"></a>1. 心得体会</h3><ol><li><p><strong>技术掌握的提升</strong></p><p>在项目开发过程中，我对C++和Qt的掌握有了显著提升。特别是在数据持久化和文件处理方面，实际操作使我对这些技术有了更深入的理解。Qt的信号与槽机制等特性在实际应用中的效果超出了我的预期，使得程序的开发变得更加高效。</p></li><li><p><strong>代码复用和功能模块化</strong></p><p>在实现过程中，复用相同界面或功能时，通过清晰的模式标识和条件逻辑可以有效区分不同操作。这种方法减少了代码重复，提高了系统的维护性。</p></li><li><p><strong>数据一致性的重要性</strong></p><p>确保数据在不同格式（XML, JSON）之间的正确转换是关键，合理的格式规范和详细的实现能避免数据不一致的问题。</p></li><li><p><strong>项目管理和组织能力的提高</strong></p><p>项目的开发需要协调多个模块和功能的实现，这不仅考验了我的编程能力，也提升了我的项目管理和组织能力。从需求分析、设计实现到测试和调试，每一步都需要精细的计划和有效的执行。通过这个项目，我学会了如何更好地分解任务、制定合理的计划表，并在开发过程中灵活调整策略以应对各种挑战。</p></li></ol><h3 id="2-对课程的建议"><a href="#2-对课程的建议" class="headerlink" title="2. 对课程的建议"></a>2. 对课程的建议</h3><ol><li><p><strong>增加实际项目案例</strong></p><p>课程中增加更多的实际项目案例，将帮助学生更好地理解理论知识的实际应用。</p></li><li><p><strong>提供更多的实际开发工具和资源</strong></p><p>课程中可以提供更多实际开发工具和资源的使用指南，例如版本控制工具（如Git）的深入讲解，测试工具的使用方法等，以帮助学生更好地进行项目管理和维护。</p></li><li><p><strong>加强测试和调试技巧的培训</strong></p><p>测试和调试是开发过程中至关重要的环节。建议课程中增加有关测试策略、调试技巧和错误处理的详细讲解和实践，以提高学生在实际开发中的问题解决能力。</p></li><li><p><strong>注重用户体验设计</strong></p><p>在课程中加强对用户体验（UX）和用户界面（UI）设计的重视，可以帮助学生更好地理解用户需求并设计出更符合用户期望的程序界面。提供一些用户体验设计的实践课程将有助于提升学生的综合设计能力。</p></li></ol><h2 id="七、-亮点"><a href="#七、-亮点" class="headerlink" title="七、 亮点"></a>七、 亮点</h2><h3 id="1-使用-Qt-的-Resources-功能实现内部资源的管理"><a href="#1-使用-Qt-的-Resources-功能实现内部资源的管理" class="headerlink" title="1. 使用 Qt 的 Resources 功能实现内部资源的管理"></a>1. 使用 Qt 的 Resources 功能实现内部资源的管理</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">RCC</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">qresource</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>styles/darkstyle.qss<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>styles/lightstyle.qss<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>langs/OOPM_zh_CN.qm<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>langs/OOPM_en_US.qm<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>imgs/low.png<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>imgs/darkBg.png<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>imgs/lightBg.png<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>imgs/bgtext.png<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>imgs/icon.png<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>passports/admin.dat<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">qresource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">RCC</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">RESOURCES</span> <span class="hljs-string">+= \</span><br><span class="hljs-string">    resources.qrc</span><br></code></pre></td></tr></table></figure><h3 id="2-重写-QWidget-的-void-paintEvent-QPaintEvent-event-函数，实现了背景的自定义，并根据明暗主题选择相应的背景。"><a href="#2-重写-QWidget-的-void-paintEvent-QPaintEvent-event-函数，实现了背景的自定义，并根据明暗主题选择相应的背景。" class="headerlink" title="2. 重写 QWidget 的 void paintEvent(QPaintEvent *event) 函数，实现了背景的自定义，并根据明暗主题选择相应的背景。"></a>2. 重写 <code>QWidget</code> 的 <code>void paintEvent(QPaintEvent *event)</code> 函数，实现了背景的自定义，并根据明暗主题选择相应的背景。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LoginWindow::paintEvent</span><span class="hljs-params">(QPaintEvent *event)</span> </span>&#123;<br>    <span class="hljs-function">QPainter <span class="hljs-title">painter</span><span class="hljs-params">(<span class="hljs-keyword">this</span>)</span></span>;<br>    <span class="hljs-keyword">if</span>(_nowTheme) painter.<span class="hljs-built_in">drawPixmap</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-built_in">width</span>(), <span class="hljs-built_in">height</span>(),<span class="hljs-built_in">QPixmap</span>(<span class="hljs-string">&quot;:/imgs/darkBg.png&quot;</span>));<br>    <span class="hljs-keyword">else</span> painter.<span class="hljs-built_in">drawPixmap</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-built_in">width</span>(), <span class="hljs-built_in">height</span>(),<span class="hljs-built_in">QPixmap</span>(<span class="hljs-string">&quot;:/imgs/lightBg.png&quot;</span>));<br>    QWidget::<span class="hljs-built_in">paintEvent</span>(event); <span class="hljs-comment">// Call base class implementation if needed</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-将多次复用的值设置为全局变量，并且调用Windows环境变量来获取相应路径。"><a href="#3-将多次复用的值设置为全局变量，并且调用Windows环境变量来获取相应路径。" class="headerlink" title="3. 将多次复用的值设置为全局变量，并且调用Windows环境变量来获取相应路径。"></a>3. 将多次复用的值设置为全局变量，并且调用Windows环境变量来获取相应路径。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">extern</span> QString DOCUMENT_PATH;<br><span class="hljs-keyword">extern</span> QString USER_FILE_PATH;<br><span class="hljs-keyword">extern</span> QString ICON_PATH;<br><span class="hljs-keyword">extern</span> QTranslator translator;<br>QString DOCUMENT_PATH = QStandardPaths::<span class="hljs-built_in">writableLocation</span>(QStandardPaths::DocumentsLocation);<br>QString USER_FILE_PATH = DOCUMENT_PATH + <span class="hljs-string">&quot;/OOPM/passports/users.dat&quot;</span>;<br>QString ICON_PATH = <span class="hljs-string">&quot;:/imgs/icon.png&quot;</span>;<br><span class="hljs-function">QTranslator <span class="hljs-title">translator</span><span class="hljs-params">(qApp)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="4-继承覆写-QAbstractTableModel-来实现各个表格的数据加载。"><a href="#4-继承覆写-QAbstractTableModel-来实现各个表格的数据加载。" class="headerlink" title="4. 继承覆写 QAbstractTableModel 来实现各个表格的数据加载。"></a>4. 继承覆写 <code>QAbstractTableModel</code> 来实现各个表格的数据加载。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">ClassModel</span>(<span class="hljs-type">const</span> QList&lt;ClassInfo&gt; &amp;classes, QObject *parent = <span class="hljs-literal">nullptr</span>);<br><span class="hljs-built_in">MemberModel</span>(<span class="hljs-type">const</span> QList&lt;ClassMember&gt; &amp;members, QObject *parent = <span class="hljs-literal">nullptr</span>);<br><span class="hljs-built_in">UserModel</span>(<span class="hljs-type">const</span> QList&lt;QPair&lt;QString, QString&gt;&gt; &amp;users, QObject *parent = <span class="hljs-literal">nullptr</span>);<br></code></pre></td></tr></table></figure><h3 id="5-将复选框有限的选项封装为枚举类，使用-QMetaType-声明为全局，增强代码的可读性。"><a href="#5-将复选框有限的选项封装为枚举类，使用-QMetaType-声明为全局，增强代码的可读性。" class="headerlink" title="5. 将复选框有限的选项封装为枚举类，使用 QMetaType 声明为全局，增强代码的可读性。"></a>5. 将复选框有限的选项封装为枚举类，使用 <code>QMetaType</code> 声明为全局，增强代码的可读性。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">enum class</span> <span class="hljs-title class_">MemberType</span> &#123; Data, Function &#125;;<br><span class="hljs-keyword">enum class</span> <span class="hljs-title class_">Accessibility</span> &#123; Public, Private, Protected &#125;;<br><span class="hljs-keyword">enum class</span> <span class="hljs-title class_">DataType</span> &#123; Int, Float, Double, Char, String, Custom &#125;;<br><span class="hljs-keyword">enum class</span> <span class="hljs-title class_">UserType</span> &#123; Admin, User, Invalid &#125;;<br><span class="hljs-built_in">Q_DECLARE_METATYPE</span>(MemberType)<br><span class="hljs-built_in">Q_DECLARE_METATYPE</span>(Accessibility)<br><span class="hljs-built_in">Q_DECLARE_METATYPE</span>(DataType)<br></code></pre></td></tr></table></figure><h3 id="6-使用正则表达式限制用户名与密码输入的范围"><a href="#6-使用正则表达式限制用户名与密码输入的范围" class="headerlink" title="6. 使用正则表达式限制用户名与密码输入的范围"></a>6. 使用正则表达式限制用户名与密码输入的范围</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">QRegularExpression <span class="hljs-title">regex</span><span class="hljs-params">(<span class="hljs-string">&quot;[A-Za-z0-9!@#$%^&amp;*()_+\\-=\\[\\]&#123;&#125;;&#x27;:\&quot;\\\\|,.&lt;&gt;\\/?]+&quot;</span>)</span></span>;<br>QRegularExpressionValidator *validator = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QRegularExpressionValidator</span>(regex, <span class="hljs-keyword">this</span>);<br>_usernameLineEdit-&gt;<span class="hljs-built_in">setValidator</span>(validator);<br>_passwordLineEdit-&gt;<span class="hljs-built_in">setValidator</span>(validator);<br></code></pre></td></tr></table></figure><h3 id="7-使用-Qt-Linguist-实现中英双语切换"><a href="#7-使用-Qt-Linguist-实现中英双语切换" class="headerlink" title="7. 使用 Qt Linguist 实现中英双语切换"></a>7. 使用 Qt Linguist 实现中英双语切换</h3><h3 id="8-使用-qss-文件实现明暗主题切换"><a href="#8-使用-qss-文件实现明暗主题切换" class="headerlink" title="8. 使用 .qss 文件实现明暗主题切换"></a>8. 使用 <code>.qss</code> 文件实现明暗主题切换</h3><h3 id="9-使用了规定格式的文档注释，便于开发与后期维护"><a href="#9-使用了规定格式的文档注释，便于开发与后期维护" class="headerlink" title="9. 使用了规定格式的文档注释，便于开发与后期维护"></a>9. 使用了规定格式的文档注释，便于开发与后期维护</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 根据 ID 移除类</span><br><span class="hljs-comment">// @param id 要移除的类的 ID</span><br><span class="hljs-comment">// @return 如果成功移除返回 true，否则返回 false</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">removeById</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> id)</span></span>;<br></code></pre></td></tr></table></figure><p><em>与自动文档生成工具<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="自动文档生成工具（如 Doxygen、Javadoc 等）可以通过解析源代码中的注释自动生成文档，将代码逻辑与解释文本结合，易于阅读。">[4]</span></a></sup>兼容</em></p><h3 id="10-使用-Git-与-Github-实现了版本管理"><a href="#10-使用-Git-与-Github-实现了版本管理" class="headerlink" title="10. 使用 Git 与 Github 实现了版本管理"></a>10. 使用 Git 与 Github 实现了版本管理</h3><p><img src="/./24%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A1%E8%AF%BE%E8%AE%BE%E6%8A%A5%E5%91%8A/image-20240907000716633.png" alt="image-20240907000716633"></p><h3 id="11-使用-QIcon-实现了界面图标的自定义"><a href="#11-使用-QIcon-实现了界面图标的自定义" class="headerlink" title="11. 使用 QIcon 实现了界面图标的自定义"></a>11. 使用 <code>QIcon</code> 实现了界面图标的自定义</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">setWindowIcon</span>(<span class="hljs-built_in">QIcon</span>(ICON_PATH)); <span class="hljs-comment">// ICON_PATH 为全局变量</span><br></code></pre></td></tr></table></figure><h3 id="12-使用-css-插入来实现控件风格自定义"><a href="#12-使用-css-插入来实现控件风格自定义" class="headerlink" title="12. 使用 css 插入来实现控件风格自定义"></a>12. 使用 <code>css</code> 插入来实现控件风格自定义</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp">_loginButton-&gt;<span class="hljs-built_in">setStyleSheet</span>(<br>    <span class="hljs-string">&quot;QPushButton &#123;&quot;</span><br>    <span class="hljs-string">&quot;    border: 2px solid rgba(219, 125, 100);&quot;</span><br>    <span class="hljs-string">&quot;    border-radius: 5px;&quot;</span><br>    <span class="hljs-string">&quot;    padding: 5px 10px;&quot;</span><br>    <span class="hljs-string">&quot;&#125;&quot;</span><br>    <span class="hljs-string">&quot;QPushButton:hover &#123;&quot;</span><br>    <span class="hljs-string">&quot;    border: 2px solid blue;&quot;</span>  <span class="hljs-comment">// 悬停时边框变为蓝色</span><br>    <span class="hljs-string">&quot;&#125;&quot;</span><br>    <span class="hljs-string">&quot;QPushButton:pressed &#123;&quot;</span><br>    <span class="hljs-string">&quot;    border: 2px solid green;&quot;</span> <span class="hljs-comment">// 按下时边框变为绿色</span><br><span class="hljs-string">&quot;&#125;&quot;</span><br>);<br></code></pre></td></tr></table></figure><h3 id="13-使用-QDir-创建文件夹来保证软件正常运行-1"><a href="#13-使用-QDir-创建文件夹来保证软件正常运行-1" class="headerlink" title="13. 使用 QDir 创建文件夹来保证软件正常运行[1]"></a>13. 使用 <code>QDir</code> 创建文件夹来保证软件正常运行<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="程序执行初，会在系统Documents目录创建`/OOPM/passports/`文件夹，文件指该路径下的users.bat文件">[1]</span></a></sup></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// main.cpp</span><br>QDir dir;<br>QString path = DOCUMENT_PATH + <span class="hljs-string">&quot;/OOPM/passports/&quot;</span>; <span class="hljs-comment">// 指定新建文件夹的路径</span><br><span class="hljs-keyword">if</span> (!dir.<span class="hljs-built_in">exists</span>(path)) &#123;<br>    <span class="hljs-comment">// 如果文件夹不存在，则创建它</span><br>    <span class="hljs-keyword">if</span> (dir.<span class="hljs-built_in">mkpath</span>(path)) <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;Folder created successfully!&quot;</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;Failed to create folder.&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;Folder already exists.&quot;</span>;<br></code></pre></td></tr></table></figure><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>程序执行初，会在系统Documents目录创建<code>/OOPM/passports/</code>文件夹，文件指该路径下的users.bat文件<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>将密码转换为<code>QByteArray</code>，使用SHA-256算法生成哈希值，并将哈希值转换为十六进制字符串以便于存储和比较。<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>远程仓库地址：<a href="https://github.com/harkerhand/OOPM">harkerhand&#x2F;OOPM (github.com)</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>自动文档生成工具（如 Doxygen、Javadoc 等）可以通过解析源代码中的注释自动生成文档，将代码逻辑与解释文本结合，易于阅读。<a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>经验分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>Qt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用DoraSSR引擎开发2048游戏Demo</title>
    <link href="/%E4%BD%BF%E7%94%A8DoraSSR%E5%BC%95%E6%93%8E%E5%BC%80%E5%8F%912048%E6%B8%B8%E6%88%8FDemo/"/>
    <url>/%E4%BD%BF%E7%94%A8DoraSSR%E5%BC%95%E6%93%8E%E5%BC%80%E5%8F%912048%E6%B8%B8%E6%88%8FDemo/</url>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><h2 id="介绍2048游戏"><a href="#介绍2048游戏" class="headerlink" title="介绍2048游戏"></a>介绍2048游戏</h2><h3 id="背景与历史"><a href="#背景与历史" class="headerlink" title="背景与历史"></a>背景与历史</h3><p>2048游戏是由意大利开发者Gabriele Cirulli在2014年创建的简易益智游戏。值得注意的是，这款游戏是在他用JavaScript自学编程时开发的，仅用了一个周末的时间。</p><p>这款游戏最初的灵感来自于一个类似的游戏——1024，而1024本身也是基于另一个名为Threes的游戏。这种创新与简化使得2048在发布后迅速走红，吸引了全球玩家的注意，并在短时间内成为了一个网络现象。</p><h3 id="游戏规则"><a href="#游戏规则" class="headerlink" title="游戏规则"></a>游戏规则</h3><p>2048的游戏规则非常简单，玩家在一个4x4的网格中通过上下左右方向键滑动方块。</p><p>当两个相同数字的方块相遇时，它们会合并成一个新方块，并且数值相加（例如两个“2”合并成“4”）。</p><p>每次滑动时，所有方块会向玩家指定的方向移动，且会在空白位置随机生成一个新的方块，通常为“2”或“4”。</p><p>游戏的目标是在网格中创造一个数字为2048的方块。当玩家无法再移动方块且没有生成2048方块时，游戏结束。</p><h3 id="流行原因"><a href="#流行原因" class="headerlink" title="流行原因"></a>流行原因</h3><p>2048之所以迅速流行，原因在于它的极简设计和易于上手的玩法。这款游戏结合了策略性和运气成分，使得玩家在短时间内沉浸其中，享受逐步逼近2048的快感。游戏的开源性也促进了它的传播，众多开发者基于原版开发了各类衍生版本和改编游戏，进一步扩大了其影响力。</p><h2 id="文章目的"><a href="#文章目的" class="headerlink" title="文章目的"></a>文章目的</h2><p>本文将介绍您如何基于DoraSSR环境编写2048游戏的程序，以及其中的重要功能和技术实现。</p><h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><h2 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h2><p>如果你是一名游戏开发的新手，你可能对如何选择合适的编程语言感到困惑。别担心，Dora SSR 提供了多种语言选择，让你可以根据自己的兴趣和项目需求来挑选。</p><p>Dora SSR 支持多种编程语言，目前包括 Lua、Yuescript、Teal、TypeScript、TSX、Rust 等。每种语言都有其独特的特点和优势。</p><p>Lua 是一种轻量级的脚本语言，以其语言特性精简，高效和易学而闻名。如果你是编程新手，或者喜欢简单明了的代码，Lua 是一个很好的选择。</p><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><ul><li><p>下载并运行<a href="https://github.com/ippclub/Dora-SSR/releases/latest">软件</a></p><ul><li><p>对于 Windows 用户，请确保您已安装 Visual Studio 2022 的 X86 Visual C++ 可再发行组件包（包含 MSVC 编译的程序所需运行时的 vc_redist.x86 补丁），以运行此应用程序。您可以从<a href="https://learn.microsoft.com/zh-cn/cpp/windows/latest-supported-vc-redist?view=msvc-170">微软网站</a>下载。</p></li><li><p>在macOS上也可以通过Homebrew进行软件安装。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">brew tap ippclub/dora-ssr<br>brew install --cask dora-ssr<br></code></pre></td></tr></table></figure></li></ul></li><li><p>通过浏览器访问软件显示的服务器地址。</p></li><li><p>开始游戏开发。</p></li></ul><h1 id="程序架构设计"><a href="#程序架构设计" class="headerlink" title="程序架构设计"></a>程序架构设计</h1><h2 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h2><ul><li><strong>模块划分</strong><br>该程序的整体架构采用了模块化设计。它通过引入多个模块（如<code>Scale</code>、<code>Audio</code>、<code>Set</code>等）来处理不同的功能。这种设计使得代码更加清晰且易于维护。主要模块包括：<ul><li><strong>主逻辑模块</strong>：处理游戏的初始化、主要逻辑控制以及事件响应。</li><li><strong>UI模块</strong>：负责绘制游戏界面，包括游戏板和方块。</li><li><strong>工具模块</strong>：提供一些常用的辅助函数，如遍历表格和查找元素。</li></ul></li><li><strong>数据结构</strong><br>游戏的核心数据结构是一个一维数组<code>data</code>，用于存储每个格子中的数字状态。每个数字方块在界面上对应一个由<code>DrawNode</code>绘制的方块对象，保存在<code>boxes</code>数组中。</li></ul><h2 id="关键模块与功能"><a href="#关键模块与功能" class="headerlink" title="关键模块与功能"></a>关键模块与功能</h2><ul><li><strong>输入处理</strong><br>程序通过键盘输入来捕捉玩家的方向操作，使用<code>slot</code>函数来监听用户按键事件，并调用相应的逻辑处理函数进行处理。</li><li><strong>游戏逻辑</strong><br>包括方块的生成、移动、合并及重新开始游戏的逻辑。通过<code>gameMove()</code>函数来处理方块的移动，并根据不同的方向（左、右、上、下）调用合并函数<code>merge(newRow)</code>。</li><li><strong>界面绘制</strong><br>使用<code>DrawNode</code>绘制方块，通过<code>Label</code>显示方块上的数字，并将它们添加到游戏主节点<code>root</code>中。</li></ul><h1 id="核心功能实现"><a href="#核心功能实现" class="headerlink" title="核心功能实现"></a>核心功能实现</h1><h2 id="游戏初始化"><a href="#游戏初始化" class="headerlink" title="游戏初始化"></a>游戏初始化</h2><ul><li><p>游戏通过<code>init()</code>函数进行初始化。在初始化过程中，程序会将数据表<code>data</code>中的值全部重置为0，并在随机位置生成一个初始的数字“2”。</p></li><li><p>同时，<code>init()</code>函数设置了键盘输入的监听器，允许玩家通过键盘控制方块的移动。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-keyword">for</span> i = <span class="hljs-number">1</span>, <span class="hljs-number">16</span>, <span class="hljs-number">1</span> <span class="hljs-keyword">do</span><br>empty:add(i)<br>data[i] = <span class="hljs-number">0</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> rand0 = empty:random_element()<br>data[rand0] = <span class="hljs-number">2</span><br>drawNumber()<br><br>root.keyboardEnabled = <span class="hljs-literal">true</span><br>root:slot(<span class="hljs-string">&quot;KeyDown&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(keyName)</span></span><br><span class="hljs-keyword">if</span> MyMethod.findElement(Direction, keyName) ~= <span class="hljs-literal">nil</span> <span class="hljs-keyword">then</span><br>    direction = keyName<br>gameMove()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;direction:&quot;</span>, keyName)<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Unknown direction:&quot;</span>, keyName) <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span>)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="方块的绘制"><a href="#方块的绘制" class="headerlink" title="方块的绘制"></a>方块的绘制</h2><ul><li><p><code>draw(x, y)</code>函数负责绘制单个方块。它使用<code>DrawNode</code>来创建方块的形状，并在其上添加一个<code>Label</code>用于显示数字。绘制时，方块会被定位到指定的坐标（<code>x</code>, <code>y</code>），并添加到主节点<code>root</code>中。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">draw</span><span class="hljs-params">(x ,y)</span></span><br><span class="hljs-keyword">local</span> drawNode = DrawNode()<br>drawNode.position = Vec2(x, y)<br>drawNode:drawPolygon(verts, Color(<span class="hljs-number">0xFF072E06</span>), <span class="hljs-number">5</span>, Color(<span class="hljs-number">0xFF2C6AC7</span>))<br><span class="hljs-keyword">local</span> lable = Label(<span class="hljs-string">&#x27;sarasa-mono-sc-regular&#x27;</span>, <span class="hljs-number">80</span>)<br>lable.text = <span class="hljs-string">&#x27;&#x27;</span><br>drawNode:addChild(lable)<br>drawNode:addTo(root)<br><span class="hljs-keyword">return</span> drawNode<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="方块的移动与合并"><a href="#方块的移动与合并" class="headerlink" title="方块的移动与合并"></a>方块的移动与合并</h2><ul><li><p>当用户按下某个方向键时，程序会通过<code>gameMove()</code>函数处理方块的移动。根据方向的不同，程序会将数据分成不同的行或列，并通过<code>merge(newRow)</code>函数来合并相同的数字。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">gameMove</span><span class="hljs-params">()</span></span><br><span class="hljs-keyword">if</span> direction == <span class="hljs-string">&quot;Left&quot;</span> <span class="hljs-keyword">then</span><br><span class="hljs-keyword">for</span> i = <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span> <span class="hljs-keyword">do</span><br><span class="hljs-comment">-- i  + 0/1/2/3 * 4</span><br><span class="hljs-keyword">local</span> newRow = &#123;&#125;<br><span class="hljs-keyword">for</span> j = <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span> <span class="hljs-keyword">do</span><br>        <span class="hljs-keyword">if</span> data[i + j * <span class="hljs-number">4</span>] ~= <span class="hljs-number">0</span> <span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">table</span>.<span class="hljs-built_in">insert</span>(newRow, data[i + j * <span class="hljs-number">4</span>])<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">while</span> #newRow &lt; <span class="hljs-number">4</span> <span class="hljs-keyword">do</span><br>        <span class="hljs-built_in">table</span>.<span class="hljs-built_in">insert</span>(newRow, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">local</span> finalRow = merge(newRow)<br><span class="hljs-keyword">for</span> j = <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span> <span class="hljs-keyword">do</span><br>        data[i + <span class="hljs-number">4</span> * j] = finalRow[j + <span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">elseif</span> direction == <span class="hljs-string">&quot;Right&quot;</span> <span class="hljs-keyword">then</span><br>...<br><span class="hljs-keyword">elseif</span> direction == <span class="hljs-string">&quot;Up&quot;</span> <span class="hljs-keyword">then</span><br>...<br><span class="hljs-keyword">else</span>  <span class="hljs-comment">-- Down</span><br>...<br><span class="hljs-keyword">end</span><br>drawNumber()<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure></li><li><p><code>merge(newRow)</code>函数负责在一行数据中将相同数字的方块合并，并返回合并后的新行数据。这个函数还确保了合并后的新行保持原有的顺序，并填充为长度为4的列表。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">merge</span><span class="hljs-params">(newRow)</span></span><br><span class="hljs-keyword">local</span> merged = &#123;<span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>&#125;<br><span class="hljs-keyword">local</span> resultRow = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;<br><span class="hljs-keyword">for</span> j = <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span> <span class="hljs-keyword">do</span><br>        <span class="hljs-keyword">if</span> newRow[j] ~= <span class="hljs-number">0</span> <span class="hljs-keyword">then</span><br>          <span class="hljs-keyword">local</span> currentValue = newRow[j]<br>          <span class="hljs-keyword">local</span> nextIndex = j + <span class="hljs-number">1</span><br>          <span class="hljs-keyword">if</span> nextIndex &lt;= <span class="hljs-number">4</span> <span class="hljs-keyword">and</span> newRow[nextIndex] == currentValue <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> merged[nextIndex] <span class="hljs-keyword">then</span><br>            resultRow[j] = currentValue * <span class="hljs-number">2</span><br>            merged[nextIndex] = <span class="hljs-literal">true</span><br>            merged[j] = <span class="hljs-literal">true</span><br>            newRow[nextIndex] = <span class="hljs-number">0</span><br>          <span class="hljs-keyword">else</span> resultRow[j] = currentValue <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">local</span> finalRow = &#123;&#125;<br>  <span class="hljs-keyword">for</span> j = <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span> <span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">if</span> resultRow[j] ~= <span class="hljs-number">0</span> <span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">table</span>.<span class="hljs-built_in">insert</span>(finalRow, resultRow[j])<br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">while</span> #finalRow &lt; <span class="hljs-number">4</span> <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">table</span>.<span class="hljs-built_in">insert</span>(finalRow, <span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">return</span> finalRow<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="随机生成新方块"><a href="#随机生成新方块" class="headerlink" title="随机生成新方块"></a>随机生成新方块</h2><ul><li><p>在每次移动之后，程序会调用<code>drawNumber()</code>函数，在空余的位置上随机生成一个新的方块。这个新方块的初始值通常为“2”。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">drawNumber</span><span class="hljs-params">()</span></span><br>empty:clear()<br>MyMethod.<span class="hljs-built_in">foreach</span>(data, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(index, value)</span></span><br><span class="hljs-keyword">if</span> (value == <span class="hljs-number">0</span>) <span class="hljs-keyword">then</span> empty:add(index) <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span>)<br><span class="hljs-keyword">if</span> empty:size() == <span class="hljs-number">0</span> <span class="hljs-keyword">then</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;over&quot;</span>) reStartGame = <span class="hljs-literal">true</span> <span class="hljs-keyword">end</span><br><span class="hljs-keyword">local</span> newRand = empty:random_element()<br>data[newRand] = <span class="hljs-number">2</span><br><br>MyMethod.<span class="hljs-built_in">foreach</span>(data, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(index, value)</span></span><br><span class="hljs-keyword">if</span> value ~= <span class="hljs-number">0</span> <span class="hljs-keyword">then</span><br>boxes[index].children.last.text = <span class="hljs-built_in">tostring</span>(value)<br><span class="hljs-keyword">else</span> boxes[index].children.last.text = <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span>)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="游戏结束处理"><a href="#游戏结束处理" class="headerlink" title="游戏结束处理"></a>游戏结束处理</h2><ul><li><p>当没有可移动的空格时，<code>empty:size() == 0</code>的判断条件会触发游戏结束逻辑，并通过<code>reStartGame</code>变量标识游戏状态。在游戏结束后，程序会播放一个音效，并重新初始化游戏。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lua">threadLoop(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br><span class="hljs-keyword">if</span>(reStartGame == <span class="hljs-literal">true</span>) <span class="hljs-keyword">then</span><br>reStartGame = <span class="hljs-literal">false</span><br>Audio:play(<span class="hljs-string">&quot;sfx/game_over.wav&quot;</span>)<br>init()<br>root:perform(Scale(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>))<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span>)<br></code></pre></td></tr></table></figure></li></ul><h1 id="优化与性能提升"><a href="#优化与性能提升" class="headerlink" title="优化与性能提升"></a>优化与性能提升</h1><h2 id="算法优化"><a href="#算法优化" class="headerlink" title="算法优化"></a>算法优化</h2><ul><li><strong>合并逻辑优化</strong><br><code>merge(newRow)</code>函数使用了一个布尔数组<code>merged</code>来跟踪哪些方块已经合并，避免重复合并。这个设计减少了不必要的计算，提高了算法的效率。</li></ul><h2 id="内存与速度优化"><a href="#内存与速度优化" class="headerlink" title="内存与速度优化"></a>内存与速度优化</h2><ul><li><strong>内存管理</strong><br>游戏中大量使用了局部变量（如<code>newRow</code>和<code>resultRow</code>），这些局部变量在函数执行完毕后自动释放，从而节省内存。</li><li><strong>减少重复操作</strong><br>在移动和合并过程中，代码尽量减少了对<code>data</code>数组的重复遍历，这有助于提升程序的整体速度。</li></ul><h2 id="用户体验优化"><a href="#用户体验优化" class="headerlink" title="用户体验优化"></a>用户体验优化</h2><ul><li><strong>动画效果</strong><br>虽然代码中目前未实现具体的动画效果，但可以通过增加方块移动、合并时的过渡动画（例如使用<code>Scale</code>来缩放方块），使得游戏体验更加流畅和有趣。</li><li><strong>声音反馈</strong><br>在游戏结束时播放音效，为玩家提供了即时的反馈，提高了游戏的沉浸感。</li></ul><h1 id="结论与未来改进"><a href="#结论与未来改进" class="headerlink" title="结论与未来改进"></a>结论与未来改进</h1><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>本文详细介绍了如何从零开始编写一个2048游戏程序，并讲解了程序的整体架构设计、核心功能实现、以及优化策略。通过模块化设计和合理的算法优化，这个程序不仅具备较高的可维护性，还能在多种平台上流畅运行。</li><li>在开发过程中，我们通过单元测试和集成测试确保了程序的稳定性，并在性能和用户体验方面进行了优化，使得游戏更加流畅和有趣。</li></ul><h2 id="未来改进方向"><a href="#未来改进方向" class="headerlink" title="未来改进方向"></a>未来改进方向</h2><ul><li><strong>增加难度模式</strong><br>可以在未来的版本中增加不同的难度模式，例如更大的网格、更高的初始数字或增加障碍物，以增强游戏的挑战性。</li><li><strong>添加AI对手</strong><br>可以考虑为游戏添加一个AI对手，让玩家与AI竞赛，看谁能先达到2048。</li><li><strong>改进用户界面和动画效果</strong><br>在未来的版本中，可以进一步改进游戏的用户界面，使之更具吸引力。同时，增加方块移动和合并时的动画效果，提高游戏的视觉体验。</li><li><strong>增加排行榜功能</strong><br>通过添加在线或本地的排行榜功能，玩家可以与朋友或全球的玩家一较高下，增加游戏的社交性和竞争性。</li></ul><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="MyMethod-lua"><a href="#MyMethod-lua" class="headerlink" title="MyMethod.lua"></a>MyMethod.lua</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> M = &#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.foreach</span><span class="hljs-params">(tbl, func)</span></span><br>    <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(tbl) <span class="hljs-keyword">do</span> func(key, value) <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">M.findElement</span><span class="hljs-params">(tbl, element)</span></span><br>    <span class="hljs-keyword">for</span> i, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(tbl) <span class="hljs-keyword">do</span><br>        <span class="hljs-keyword">if</span> value == element <span class="hljs-keyword">then</span> <span class="hljs-keyword">return</span> i <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">return</span> M<br></code></pre></td></tr></table></figure><h2 id="Set-lua"><a href="#Set-lua" class="headerlink" title="Set.lua"></a>Set.lua</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> Set = &#123;&#125;<br>Set.<span class="hljs-built_in">__index</span> = Set<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Set.new</span><span class="hljs-params">()</span></span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">setmetatable</span>(&#123; _items = &#123;&#125; &#125;, Set)<br><span class="hljs-keyword">end</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Set:add</span><span class="hljs-params">(item)</span></span><br>    <span class="hljs-built_in">self</span>._items[item] = <span class="hljs-literal">true</span><br><span class="hljs-keyword">end</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Set:remove</span><span class="hljs-params">(item)</span></span><br>    <span class="hljs-built_in">self</span>._items[item] = <span class="hljs-literal">nil</span><br><span class="hljs-keyword">end</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Set:contains</span><span class="hljs-params">(item)</span></span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">self</span>._items[item] ~= <span class="hljs-literal">nil</span><br><span class="hljs-keyword">end</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Set:size</span><span class="hljs-params">()</span></span><br>    <span class="hljs-keyword">local</span> count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(<span class="hljs-built_in">self</span>._items) <span class="hljs-keyword">do</span><br>        count = count + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">return</span> count<br><span class="hljs-keyword">end</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Set:iterate</span><span class="hljs-params">()</span></span><br>    <span class="hljs-keyword">local</span> items = &#123;&#125;<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(<span class="hljs-built_in">self</span>._items) <span class="hljs-keyword">do</span><br>        <span class="hljs-built_in">table</span>.<span class="hljs-built_in">insert</span>(items, item)<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">return</span> items<br><span class="hljs-keyword">end</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Set:print</span><span class="hljs-params">()</span></span><br><span class="hljs-keyword">for</span> _, item <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(<span class="hljs-built_in">self</span>:iterate()) <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">print</span>(item)<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Set:random_element</span><span class="hljs-params">()</span></span><br>    <span class="hljs-keyword">local</span> items = <span class="hljs-built_in">self</span>:iterate()<br>    <span class="hljs-keyword">if</span> #items == <span class="hljs-number">0</span> <span class="hljs-keyword">then</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">local</span> index = <span class="hljs-built_in">math</span>.<span class="hljs-built_in">random</span>(<span class="hljs-number">1</span>, #items)<br>    <span class="hljs-keyword">return</span> items[index]<br><span class="hljs-keyword">end</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Set:clear</span><span class="hljs-params">()</span></span><br>    <span class="hljs-built_in">self</span>._items = &#123;&#125;<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">return</span> Set<br></code></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><a href="https://harker.lanzouw.com/iDjBJ276m0ha">本文工程压缩包</a></li><li><a href="https://atom-l.github.io/lua5.4-manual-zh/1.html">Lua 5.4 中文参考手册</a></li><li><a href="https://dora-ssr.net/zh-Hans/docs/api/intro">Dora SSR API 参考手册</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>经验分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Lua</tag>
      
      <tag>DoraSSR</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>申请域名相关</title>
    <link href="/%E7%94%B3%E8%AF%B7%E5%9F%9F%E5%90%8D%E7%9B%B8%E5%85%B3/"/>
    <url>/%E7%94%B3%E8%AF%B7%E5%9F%9F%E5%90%8D%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>个人开设网站已经三年有余了，从最开始的本地部署、Gitee部署到现在的Github + 域名部署，不断遇到各种问题，最大的问题是各种服务的链接各不相同，难以统一记忆与管理，遂需要一个域名，通过二级转发来解决这些问题。</p><p>前几日听俱乐部的小伙伴说首年的域名都很便宜，那么 <strong>域名，启动！</strong></p><h1 id="平台选择"><a href="#平台选择" class="headerlink" title="平台选择"></a>平台选择</h1>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-f40a3fac" role="button" aria-expanded="false" aria-controls="collapse-f40a3fac">        <div class="fold-arrow">▶</div>各种平台      </div>      <div class="fold-collapse collapse" id="collapse-f40a3fac">        <div class="fold-content">          <div class="note note-success">            <p><a href="https://cloud.tencent.com/">腾讯云 产业智变·云启未来 - 腾讯 (tencent.com)</a></p>          </div><div class="note note-success">            <p><a href="https://cn.aliyun.com/">阿里云-计算，为了无法计算的价值 (aliyun.com)</a></p>          </div>        </div>      </div>    </div><p><em>不一一列举了，有很多</em></p><p>我选择了腾讯云，国内使用体验较好。<span class="label label-primary">.online</span>的顶级域名首年只需要不到10元。</p><p>购买后及时完成认证，备案与否自由选择。</p><h1 id="配置DNS解析"><a href="#配置DNS解析" class="headerlink" title="配置DNS解析"></a>配置DNS解析</h1><p>可配置值有一下几种</p><table><thead><tr><th align="center">主机记录</th><th align="center">记录类型</th><th align="center">线路类型</th><th align="center">记录值</th><th align="center">权重</th><th align="center">TTL</th><th align="center">备注</th></tr></thead></table><h2 id="主机记录"><a href="#主机记录" class="headerlink" title="主机记录"></a>主机记录</h2><p>即二级域名，比如<code>www</code>.baidu.com与<code>pan</code>.baidu.com的区别就是前缀的二级域名，这样可以使一个域名被多个服务使用。</p><h2 id="记录类型"><a href="#记录类型" class="headerlink" title="记录类型"></a>记录类型</h2><p>常用的只有以下三种</p><ul><li><span class="label label-primary">A</span> ：指向一个IPv4地址</li><li><span class="label label-primary">CNAME</span> ：指向一个域名</li><li><span class="label label-primary">AAAA</span> ：指向一个IPv6地址</li></ul><h2 id="线路类型"><a href="#线路类型" class="headerlink" title="线路类型"></a>线路类型</h2><p>与转发路径与转发服务器偏好有关，一般默认即可。</p><h2 id="记录值"><a href="#记录值" class="headerlink" title="记录值"></a>记录值</h2><p><code>主机记录</code>.<code>域名</code>指向的地址，类型由<code>记录类型</code>决定。</p><h2 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h2><p>范围1-100，数字越大优先级越高。</p><h2 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h2><p>生存时间，一般设置为600。</p><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>字面意思，就是备注，似乎没有字数限制，也就是说你可以在这里发癫！</p><h2 id="本人DNS备份"><a href="#本人DNS备份" class="headerlink" title="本人DNS备份"></a>本人DNS备份</h2><table><thead><tr><th align="center">主机记录</th><th align="center">记录类型</th><th align="center">线路类型</th><th align="center">记录值</th><th align="center">权重</th><th align="center">TTL</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">@</td><td align="center">CNAME</td><td align="center">默认</td><td align="center">harkerhand.github.io.</td><td align="center">99</td><td align="center">600</td><td align="center"></td></tr><tr><td align="center">www</td><td align="center">CNAME</td><td align="center">默认</td><td align="center">harkerhand.github.io.</td><td align="center">100</td><td align="center">600</td><td align="center"></td></tr><tr><td align="center">waline</td><td align="center">CNAME</td><td align="center">默认</td><td align="center">cname.vercel-dns.com.</td><td align="center">3</td><td align="center">600</td><td align="center">waline评论</td></tr><tr><td align="center">image</td><td align="center">CNAME</td><td align="center">默认</td><td align="center">telegraph-image-bhq.pages.dev.</td><td align="center">4</td><td align="center">600</td><td align="center">tele图床</td></tr><tr><td align="center"><code>Bing认证</code></td><td align="center">CNAME</td><td align="center">默认</td><td align="center">verify.bing.com.</td><td align="center">1</td><td align="center">600</td><td align="center"></td></tr></tbody></table><p><a href="https://www.harkerhand.online/">Where Is Mountain</a></p><p><a href="https://waline.harkerhand.online/">Waline Example</a></p><p><a href="https://image.harkerhand.online/">Telegraph-Image|免费图床</a></p><p><em>所有服务均无内容审查，请勿传播非法内容</em></p><h1 id="一些问题的解决"><a href="#一些问题的解决" class="headerlink" title="一些问题的解决"></a>一些问题的解决</h1><h2 id="waline评论"><a href="#waline评论" class="headerlink" title="waline评论"></a>waline评论</h2><p>服务运行在Vercel，其域名<code>vercel.app</code>在国内无法访问，所以在前文中没有使用这个评论服务。</p><p>然而，通过自己的域名对其服务进行转发，即可通过DNS服务商来绕过流量屏蔽，大大提高了访问速度。</p><h2 id="基于Telegraph的图床"><a href="#基于Telegraph的图床" class="headerlink" title="基于Telegraph的图床"></a>基于Telegraph的图床</h2><p>服务运行在CloudFlare，国内虽可以访问，但速度并不理想，同理可使用域名转发进行加速。</p>]]></content>
    
    
    <categories>
      
      <category>经验分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>进行Hexo大版本更新</title>
    <link href="/%E8%BF%9B%E8%A1%8CHexo%E5%A4%A7%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0/"/>
    <url>/%E8%BF%9B%E8%A1%8CHexo%E5%A4%A7%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>昨晚偶然打开了 package.json，发现 hexo 版本为 6.3.0，遂决定升至最新 v7.1.1。</p><h1 id="遭遇错误"><a href="#遭遇错误" class="headerlink" title="遭遇错误"></a>遭遇错误</h1><p>执行报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm update hexo-cli -g<br></code></pre></td></tr></table></figure><blockquote><hr><p>重启解决 99% 的问题，剩下 1% 用重装</p><hr></blockquote><p>秉持这个思想，我选择重装</p><h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p>备份旧版本的文章，格式，Hexo及Fluid的配置文件</p><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm uninstall hexo-cli -g<br></code></pre></td></tr></table></figure><p>并进入 C:\Users\UserName\AppData\Roaming\npm 路径检查卸载是否彻底</p><h2 id="安装本体"><a href="#安装本体" class="headerlink" title="安装本体"></a>安装本体</h2><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo -g<br></code></pre></td></tr></table></figure><p>并进入 C:\Users\HarkerHand\AppData\Roaming\npm\node_modules\hexo\package.json 查找 <code>version</code> 字段，版本为 v7.1.1 即为安装成功</p><p>Git Bash cd 进入博客文件夹，需要清空</p><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init<br></code></pre></td></tr></table></figure><h2 id="模块及主题恢复"><a href="#模块及主题恢复" class="headerlink" title="模块及主题恢复"></a>模块及主题恢复</h2><p><em>以下在 init 的文件夹中操作</em></p><ul><li><p><a href="https://github.com/xcodebuild/hexo-asset-image">hexo-asset-image</a> </p><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-asset-image --save<br></code></pre></td></tr></table></figure><p>在 <code>_config.yml</code> 中设置 <code>post_asset_folder: true</code></p></li><li><p><a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a></p><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure></li><li><p><a href="https://github.com/hexojs/hexo-server">hexo-server</a></p><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-server --save<br></code></pre></td></tr></table></figure></li><li><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">hexo-theme-fluid</a></p><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-theme-fluid --save<br></code></pre></td></tr></table></figure></li></ul><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>在更新主题时原配置被完全覆盖，提醒大家做好备份</p><p><strong>数据无价！！！</strong></p>]]></content>
    
    
    <categories>
      
      <category>经验分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CloudFlare+telegraph图床部署</title>
    <link href="/CloudFlare-telegraph%E5%9B%BE%E5%BA%8A%E9%83%A8%E7%BD%B2/"/>
    <url>/CloudFlare-telegraph%E5%9B%BE%E5%BA%8A%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="提醒"><a href="#提醒" class="headerlink" title="提醒"></a>提醒</h1><p>本文封面及所涉及的所有图片均来自云端图床，故随时存在无法访问的风险</p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="Fork-项目"><a href="#Fork-项目" class="headerlink" title="Fork 项目"></a>Fork 项目</h2><p>将此项目Fork进自己的仓库 <a href="https://github.com/cf-pages/Telegraph-Image">Telegraph-Image</a></p><h2 id="部署CloudFlare"><a href="#部署CloudFlare" class="headerlink" title="部署CloudFlare"></a>部署CloudFlare</h2><p>使用 Pages 服务部署该仓库</p><p>创建KV : img_url</p><p>命名空间 img_url &#x3D; img_url</p><p>环境变量 BASIC_USER BASIC_PASS 后台管理用户名，密码</p><p>部署后得到前端网址</p><p>后缀 &#x2F;admin 进入后台管理</p><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>公开使用：</p><p><a href="https://telegraph-image-bhq.pages.dev/">Pic-Url</a> <em>源链</em></p><p><a href="https://image.harkerhand.online/">Image</a> <em>转发链</em></p><table><thead><tr><th align="center"><img src="https://image.harkerhand.online/file/d75a74b5acb3470accf7c.jpg"  /><strong>Knife is short, I use python</strong></th><th align="center"><img src="https://image.harkerhand.online/file/1e6d8b6f0f776fb6d77c2.jpg" style="zoom:90%;" /></th></tr></thead></table>]]></content>
    
    
    <categories>
      
      <category>经验分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blog</tag>
      
      <tag>图床</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Twikoo的博客评论搭建</title>
    <link href="/%E5%9F%BA%E4%BA%8ETwikoo%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E6%90%AD%E5%BB%BA/"/>
    <url>/%E5%9F%BA%E4%BA%8ETwikoo%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>寒假期间，好友章隐基于<a href="https://cn.wordpress.org/">WordPress</a>搭建了自己的博客<a href="http://117.72.35.48/">彰隐的个人博客</a>，包含有评论系统，十分有趣，故决定给自己的站点也增加这一服务。</p><p>本站基于<a href="https://hexo.io/zh-cn/index.html">Hexo</a>搭建，在GitHub Pages和Gitee Pages双端部署，使用<a href="https://fluid-dev.github.io/hexo-fluid-docs/">Fluid</a>主题进行美化，功能丰富，内置了许多主题插件使用。</p><p>打开 node_modules&#x2F;hexo-theme-fluid&#x2F;_config.yml 并查找 comment 字段，可以看到</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 评论插件</span><br><span class="hljs-comment"># Comment plugin</span><br><span class="hljs-attr">comments:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span><br>  <span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis | giscus | discuss</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">twikoo</span><br></code></pre></td></tr></table></figure><p>将<code>enable</code>字段改为<code>true</code>并将<code>type</code>字段改为对应的评论服务即可</p><h1 id="评论系统的挑选"><a href="#评论系统的挑选" class="headerlink" title="评论系统的挑选"></a>评论系统的挑选</h1><h2 id="Valine"><a href="#Valine" class="headerlink" title="Valine"></a>Valine</h2><p><a href="https://valine.js.org/">Valine</a>诞生于2017年8月7日，是一款基于<a href="https://leancloud.cn/">LeanCloud</a>的快速、简洁且高效的无后端评论系统。</p><p>其无后端的性质导致了评论难以管理，故放弃</p><h2 id="Waline"><a href="#Waline" class="headerlink" title="Waline"></a>Waline</h2><p>显然，<a href="https://waline.js.org/">Waline</a>是对Valine的一个继承，它具有后端。</p><p>推荐的后端部署渠道有Vercel，CloudeBase等，在我的账号与设备上出现了不可预知的错误，另外vecel.app域名在国内无法正常访问，会出现Failed to fetch错误。</p><p>较为繁琐但免费高效的Netlify部署，以我无法注册账号宣告失败。</p><p>很可惜，Waline也无法使用。</p><h2 id="Twikoo"><a href="#Twikoo" class="headerlink" title="Twikoo"></a>Twikoo</h2><p>这便是本文的主角，<a href="https://twikoo.js.org/">Twikoo | 一个简洁、安全、免费的静态网站评论系统</a>。</p><p>我选择了 <a href="https://www.hugging-face.org/">Hugging Face</a> 部署，与Netlify类似，完全免费并且在国内拥有不错的访问速度，其数据库位于 <a href="https://www.mongodb.com/zh-cn">MongoDB</a> ，可以使用 Google 账号快速登陆，不存在注册账号问题，并且同样免费。</p><p>获取环境ID后填入_config.yml中的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">twikoo:</span><br>  <span class="hljs-attr">envID:</span> <span class="hljs-string">Here!!!</span><br></code></pre></td></tr></table></figure><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p><img src="/./%E5%9F%BA%E4%BA%8ETwikoo%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E6%90%AD%E5%BB%BA/comment.png" alt="comment"></p><p>本文下方的评论区同理，如果你使用的是移动设备，布局会略有不同</p>]]></content>
    
    
    <categories>
      
      <category>经验分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅尝Github Actions</title>
    <link href="/%E6%B5%85%E5%B0%9DGithub-Actions/"/>
    <url>/%E6%B5%85%E5%B0%9DGithub-Actions/</url>
    
    <content type="html"><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>本人正在进行C++课程的学习，每次作业组成为若干编程题目，每个题目需要包括测试文件.cpp，类的声明头文件.h，类的实现文件.cpp</p><p>大致的文件树在此列出</p><ul><li>001<ul><li>exp01<ul><li>ex1.cpp</li><li>Complex.h</li><li>Complex.cpp</li></ul></li><li>exp02</li><li>…</li></ul></li><li>002<ul><li>exp01</li><li>…</li></ul></li><li>…</li></ul><p><strong>作业提交格式 :</strong> 将上述文件全部打包为.zip文件发送至指定邮箱</p><p><strong>需求 :</strong> 排除本地调试生成的.exe文件，自动打包</p><p><em>注 : 作者使用git来进行本地与<a href="https://gitee.com/harkerhand/homework2">云端仓库</a>的链接，.gitignore文件包含了*.exe</em></p><h1 id="Github-Actions-简介"><a href="#Github-Actions-简介" class="headerlink" title="Github Actions 简介"></a>Github Actions 简介</h1><p>GitHub Actions 是一种持续集成和持续交付 (CI&#x2F;CD) 平台，可用于自动执行生成、测试和部署管道。 您可以创建工作流程来构建和测试存储库的每个拉取请求，或将合并的拉取请求部署到生产环境。</p><p>GitHub Actions 不仅仅是 DevOps，还允许您在存储库中发生其他事件时运行工作流程。 例如，您可以运行工作流程，以便在有人在您的存储库中创建新问题时自动添加相应的标签。</p><p>GitHub 提供 Linux、Windows 和 macOS 虚拟机来运行工作流程，或者您可以在自己的数据中心或云基础架构中托管自己的自托管运行器。</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul><li>创建GitHub仓库</li><li>在 <strong>Settings–Actions–General</strong> 中更改 <strong>Actions permissions</strong> 为 <strong>Allow all actions and reusable workflows</strong>，点击 <strong>Save</strong> 保存</li><li>更改相同路径下的 <strong>Workflow permissions</strong> 为 <strong>Read and write permissions</strong>，并勾选 <strong>Allow GitHub Actions to create and approve pull requests</strong>，点击 <strong>Save</strong> 保存</li></ul><h1 id="编写Actions文件"><a href="#编写Actions文件" class="headerlink" title="编写Actions文件"></a>编写Actions文件</h1><p>在Actions选项卡中，选择 <strong>set up a workflow yourself</strong></p><p>进入编辑界面，文件路径为 &#x2F;.github&#x2F;workflows&#x2F;main.yml，文件名可自定义</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">zip</span><br><span class="hljs-attr">on:</span> [<span class="hljs-string">push</span>]<br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v1</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">zip</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        for file in ./*</span><br><span class="hljs-string">        do</span><br><span class="hljs-string">          zip -r ./$&#123;file&#125;/$&#123;file&#125;.zip $&#123;file&#125;</span><br><span class="hljs-string">        done</span><br><span class="hljs-string"></span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">list</span> <span class="hljs-string">files</span><br>      <span class="hljs-attr">run:</span><br>        <span class="hljs-string">ls</span> <span class="hljs-string">-R</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">commit</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        git config --global user.name &quot;harkerhand&quot;</span><br><span class="hljs-string">        git config --global user.email &quot;harkerhand@outlook.com&quot;</span><br><span class="hljs-string">        git add .</span><br><span class="hljs-string">        git commit -m &quot;zip&quot; -a</span><br><span class="hljs-string"></span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">push</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">ad-m/github-push-action@master</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">github_token:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br></code></pre></td></tr></table></figure><ul><li>name 为流程名</li><li>on 代表触发条件</li><li>jobs 为流程动作</li><li>build 为子流程名，可以有多个</li><li>runs-on 指定了脚本运行的环境，这是一个枚举类型</li><li>steps 为具体流程，数组类型</li><li>uses 使用打包好的流程，这里是从远程仓库拉取至虚拟机</li><li>name 为步骤名，可省略</li><li>run 内为执行命令，多行脚本需要添加 |</li><li>使用shell命令打包并列出文件（便于后期维护）</li><li>在push之前设置虚拟机的git用户名和邮箱</li><li>uses 使用打包好的push流程</li></ul><p><em>Tips : 需要在个人设置中生成名为 GITHUB_TOKEN 的 token</em></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>直接在GitHub更改.yml文件即被视为push，触发Actions</p><p>转到Actions选项卡，出现类似<img src="/./%E6%B5%85%E5%B0%9DGithub-Actions/actions_result.png" alt="actions result"></p><p>即为成功，库文件夹中出现对应.zip文件</p><h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><p><a href="https://docs.github.com/zh/actions">GitHub Actions 文档 - GitHub 文档</a></p>]]></content>
    
    
    <categories>
      
      <category>经验分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>8465.马走日</title>
    <link href="/OJ/8465/"/>
    <url>/OJ/8465/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p><strong>描述</strong>  马在中国象棋以日字形规则移动。</p><p>请编写一段程序，给定n*m大小的棋盘，以及马的初始位置(x，y)，要求不能重复经过棋盘上的同一个点，计算马可以有多少途径遍历棋盘上的所有点。</p><p><strong>输入</strong>  第一行为整数T(T &lt; 10)，表示测试数据组数。<br>每一组测试数据包含一行，为四个整数，分别为棋盘的大小以及初始位置坐标n,m,x,y。(0&lt;&#x3D;x&lt;&#x3D;n-1,0&lt;&#x3D;y&lt;&#x3D;m-1, m &lt; 10, n &lt; 10)</p><p><strong>输出</strong>  每组测试数据包含一行，为一个整数，表示马能遍历棋盘的途径总数，0为无法遍历一次。</p><p><strong>样例输入</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">1<br>5 4 0 0<br></code></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">32<br></code></pre></td></tr></table></figure></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>有八步走法, 列出来</li><li>数组存储走过的状态</li><li>判断下一步能不能走, 跳到下一步</li><li>总步数为棋盘面积时, 全部走完, 计数器加一</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> step[<span class="hljs-number">8</span>][<span class="hljs-number">2</span>] = &#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-2</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">-2</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>&#125;, &#123;<span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>&#125;&#125;;<br><span class="hljs-comment">// 写出所有可能的走法</span><br><span class="hljs-type">int</span> whe[<span class="hljs-number">11</span>][<span class="hljs-number">11</span>]; <span class="hljs-comment">// 判断</span><br><br><span class="hljs-type">int</span> n, m;        <span class="hljs-comment">// 棋盘大小</span><br><span class="hljs-type">int</span> map[<span class="hljs-number">11</span>][<span class="hljs-number">11</span>]; <span class="hljs-comment">// 棋盘</span><br><br><span class="hljs-type">int</span> count; <span class="hljs-comment">// 计数器</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> steps)</span></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-type">int</span> i, nx, ny;<br>    <span class="hljs-keyword">if</span> (steps == n * m)<br>    &#123;<br>        count++;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)<br>    &#123;<br>        nx = x + step[i][<span class="hljs-number">0</span>]; <span class="hljs-comment">// 判断能否走这一步 </span><br>        ny = y + step[i][<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span> (nx &lt; n &amp;&amp; nx &gt;= <span class="hljs-number">0</span> &amp;&amp; ny &lt; m &amp;&amp; ny &gt;= <span class="hljs-number">0</span> &amp;&amp; !whe[nx][ny])<br>        &#123;<br>            whe[nx][ny] = <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">dfs</span>(nx, ny, steps + <span class="hljs-number">1</span>);<br>            whe[nx][ny] = <span class="hljs-number">0</span>; <span class="hljs-comment">// 检测一次后重置</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x, y;<br>    <span class="hljs-type">int</span> k;<br>    cin &gt;&gt; k;<br>    <span class="hljs-keyword">while</span> (k--)<br>    &#123;<br>        count = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">memset</span>(whe, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(whe));<br>        cin &gt;&gt; n &gt;&gt; m &gt;&gt; x &gt;&gt; y;<br>        whe[x][y] = <span class="hljs-number">1</span>; <span class="hljs-comment">// 初始坐标</span><br>        <span class="hljs-built_in">dfs</span>(x, y, <span class="hljs-number">1</span>);<br>        cout &lt;&lt; count &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OpenJudge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>OpenJudge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++从入门到放弃</title>
    <link href="/C-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    <url>/C-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>下文代码中会用到一些函数</p><p>在此处做出声明</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap01</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> *b)</span> <span class="hljs-comment">// 传入地址</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> temp = *a; <span class="hljs-comment">// *解引用</span><br>    *a = *b;<br>    *b = temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bubble</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr, <span class="hljs-type">int</span> len)</span> <span class="hljs-comment">// 对数组进行冒泡排序</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; len - i - <span class="hljs-number">1</span>; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>])<br>            &#123;<br>                <span class="hljs-built_in">swap01</span>(arr + j, arr + j + <span class="hljs-number">1</span>);<br>                <span class="hljs-comment">// 数组的变量名可以直接加法表示后面的某一位</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">person</span><br>&#123;<br>    <span class="hljs-comment">// 结构体 自定义数据类型</span><br>    <span class="hljs-comment">// 例子</span><br>    string name;<br>    <span class="hljs-type">short</span> age;<br>    <span class="hljs-type">bool</span> sex;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap02</span><span class="hljs-params">(person *a, person *b)</span> <span class="hljs-comment">// 交换结构体</span></span><br><span class="hljs-function"></span>&#123;<br>    person temp = *a;<br>    *a = *b;<br>    *b = temp;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">person</span> people[<span class="hljs-number">2</span>] = &#123;<br>    &#123;<span class="hljs-string">&quot;boy&quot;</span>, <span class="hljs-number">16</span>, <span class="hljs-number">1</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;girl&quot;</span>, <span class="hljs-number">14</span>, <span class="hljs-number">0</span>&#125;&#125;;<br></code></pre></td></tr></table></figure><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><h2 id="一般"><a href="#一般" class="headerlink" title="一般"></a>一般</h2><p>int *p;</p><p>声明一个指针, 指针保存的是地址</p><p>声明时 * 表示指针, 引用时 * 表示解引用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">2</span>;<br><span class="hljs-built_in">swap01</span>(&amp;a, &amp;b); <span class="hljs-comment">// &amp; 表示取地址</span><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; b = &quot;</span> &lt;&lt; b &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h2 id="const修饰"><a href="#const修饰" class="headerlink" title="const修饰"></a>const修饰</h2><p>  const修饰指针, 指向可以改, 值不能改</p><p>  const修饰常量, 指向不可改, 值可以改</p><p>  const也可以两者都修饰</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">2</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> *p1 = &amp;a;<br>p1 = &amp;b;<br><span class="hljs-type">int</span> *<span class="hljs-type">const</span> p2 = &amp;b;<br>*p2 = a;<br></code></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>指针和数组</p><p>int arr[4] &#x3D; {1, 2, 3, 4};</p><p>arr即为首个元素的地址</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> arr[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>&#125;;<br><span class="hljs-type">int</span> len = <span class="hljs-built_in">sizeof</span>(arr) / <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>]);<br><span class="hljs-built_in">bubble</span>(arr, len);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;arr[&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;] = &quot;</span> &lt;&lt; arr[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>创建一个函数,  交换两个人的信息</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">swap02</span>(people, people + <span class="hljs-number">1</span>); <span class="hljs-comment">// 传入地址 people是数组</span><br>cout &lt;&lt; <span class="hljs-string">&quot;people[0].name = &quot;</span> &lt;&lt; people[<span class="hljs-number">0</span>].name &lt;&lt; <span class="hljs-string">&quot; people[1].name = &quot;</span> &lt;&lt; people[<span class="hljs-number">1</span>].name &lt;&lt; endl;<br></code></pre></td></tr></table></figure><p>指针使用 -&gt; 访问结构体中的元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cout &lt;&lt; <span class="hljs-string">&quot;people[0].name = &quot;</span> &lt;&lt; people-&gt;name &lt;&lt; <span class="hljs-string">&quot; people[1].name = &quot;</span> &lt;&lt; (people + <span class="hljs-number">1</span>)-&gt;name &lt;&lt; endl;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>经验分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>国内高速图床解决方案--Vika</title>
    <link href="/%E5%9B%BD%E5%86%85%E9%AB%98%E9%80%9F%E5%9B%BE%E5%BA%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-Vika/"/>
    <url>/%E5%9B%BD%E5%86%85%E9%AB%98%E9%80%9F%E5%9B%BE%E5%BA%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-Vika/</url>
    
    <content type="html"><![CDATA[<h1 id="Vika简介"><a href="#Vika简介" class="headerlink" title="Vika简介"></a>Vika简介</h1><blockquote><p>vika 维格表</p><p>是一种支持 API 的连接型智能多维表格</p><p>是新一代团队数据协作和项目管理工具</p><p>通过 vika 维格表, 你可以：</p><ul><li>轻松实现项目管理与团队协作</li><li>不用写 1 行代码, 就可以做出适配业务发展需要的 IT 系统</li><li>不懂编程也能搭建自己的数据库</li><li>支持图片 视频 文档等数据存储, 将个人工作碎片化的信息结构化地整理起来</li><li>开放 API, 连通一切</li></ul></blockquote><h1 id="Picgo简介"><a href="#Picgo简介" class="headerlink" title="Picgo简介"></a>Picgo简介</h1><blockquote><p><strong>一个用于快速上传图片并获取图片 URL 链接的工具</strong></p><ul><li><p>灵活上传主窗口支持拖拽 选择图片上传; 支持读取剪贴板的第一张图片快捷上传</p></li><li><p>上传成功后自动复制链接地址到剪贴板, 支持5种复制粘贴格式, 让你的文本编辑极致高效</p></li><li><p>支持JavaScript开发的插件, 给予插件极大自由度，让PicGo更加强大, 成为你得手的效率工具</p></li></ul></blockquote><h1 id="配置Picgo"><a href="#配置Picgo" class="headerlink" title="配置Picgo"></a>配置Picgo</h1><h2 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h2><p>官方有翔实的用户文档, 点击<a href="https://picgo.github.io/PicGo-Doc/zh/">PicGo</a>来阅读</p><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>如图</p><p><img src="/./%E5%9B%BD%E5%86%85%E9%AB%98%E9%80%9F%E5%9B%BE%E5%BA%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-Vika/00003.png" alt="插件设置"></p><h2 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h2><p>进入 <strong>图床设置</strong> <strong>vika维格表</strong></p><p>需要配置的有 <strong>API Token</strong> 和 <strong>维格表ID</strong></p><p>进入<a href="https://vika.cn/">Vika维格表</a>, 注册账号并登录</p><p>新建一个空白维格表, 如图</p><p><img src="/./%E5%9B%BD%E5%86%85%E9%AB%98%E9%80%9F%E5%9B%BE%E5%BA%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-Vika/00004.png"></p><p>完成后点击右上角 <strong>高级功能</strong> <strong>API</strong> <strong>Get获取</strong> <strong>显示API Token</strong> 如图</p><p><img src="/./%E5%9B%BD%E5%86%85%E9%AB%98%E9%80%9F%E5%9B%BE%E5%BA%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-Vika/api.png"></p><p>上面的是 <strong>维格表ID</strong></p><p>下面的是 <strong>API Token</strong></p><p>其他配置项不需要更改</p><h1 id="额外说明"><a href="#额外说明" class="headerlink" title="额外说明"></a>额外说明</h1><p>Vika维格表每张提供1G空间</p><p>总共可以建十张表</p><p>推荐配合<a href="https://tinypng.com/">TinyPNG</a>压缩图片后上传</p><p>另外 你可以通过点击我的<a href="https://vika.cn/?inviteCode=91063604">Vika邀请</a>链接</p><p>或 输入我的邀请码<code>91063604</code>来获取1000V币</p><p>3000V币即可扩充空间</p>]]></content>
    
    
    <categories>
      
      <category>经验分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blog</tag>
      
      <tag>图床</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo提交百度搜索引擎收录</title>
    <link href="/Hexo%E6%8F%90%E4%BA%A4%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%94%B6%E5%BD%95/"/>
    <url>/Hexo%E6%8F%90%E4%BA%A4%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%94%B6%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="百度资源平台添加网站"><a href="#百度资源平台添加网站" class="headerlink" title="百度资源平台添加网站"></a>百度资源平台添加网站</h1><p>访问<a href="https://ziyuan.baidu.com/">百度搜索资源平台官网</a>, 注册或者登陆百度账号</p><p>依次选择<strong>用户中心</strong> <strong>站点管理</strong>, 添加你的网站</p><h1 id="设置主动推送"><a href="#设置主动推送" class="headerlink" title="设置主动推送"></a>设置主动推送</h1><h2 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件[1]"></a>安装插件<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[huiwang/hexo-baidu-url-submit](https://github.com/huiwang/hexo-baidu-url-submit)">[1]</span></a></sup></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-baidu-url-submit --save<br></code></pre></td></tr></table></figure><h2 id="配置-config-yaml"><a href="#配置-config-yaml" class="headerlink" title="配置_config.yaml"></a>配置_config.yaml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">baidu_url_submit:</span><br><span class="hljs-attr">count:</span> <span class="hljs-number">1</span> <span class="hljs-string">//每次提交多少个新链接</span><br><span class="hljs-attr">host:</span> <span class="hljs-string">//域名</span><br><span class="hljs-attr">token:</span> <span class="hljs-string">//在百度站长平台获取</span><br><span class="hljs-attr">path:</span> <span class="hljs-string">baidu_urls.txt</span><br></code></pre></td></tr></table></figure><p><em>其中token在 <strong>站点管理</strong> <strong>资源提交</strong> <strong>普通收录</strong> 中</em></p><h2 id="加入新的deployer"><a href="#加入新的deployer" class="headerlink" title="加入新的deployer"></a>加入新的deployer</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br><span class="hljs-string">//这里是之前的配置</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">baidu_url_submitter</span><br></code></pre></td></tr></table></figure><h2 id="最后部署"><a href="#最后部署" class="headerlink" title="最后部署"></a>最后部署</h2><p>运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g -d<br></code></pre></td></tr></table></figure><p>出现形如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<span class="hljs-string">&quot;remain&quot;</span>:2951,<span class="hljs-string">&quot;success&quot;</span>:19&#125;<br></code></pre></td></tr></table></figure><p>表示成功</p><h1 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br></code></pre></td></tr></table></figure><p>产生一个文本文件, 包含新连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo d<br></code></pre></td></tr></table></figure><p>读取链接, 提交至百度引擎</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/huiwang/hexo-baidu-url-submit">huiwang&#x2F;hexo-baidu-url-submit</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>经验分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>百度</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7891.一元三次方程求解</title>
    <link href="/OJ/7891/"/>
    <url>/OJ/7891/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p><strong>描述</strong>  有形如：ax3+bx2+cx+d&#x3D;0 这样的一个一元三次方程。</p><p>给出该方程中各项的系数(a，b，c，d 均为实数)，并约定该方程存在三个不同实根(根的范围在-100至100之间)，且根与根之差的绝对值&gt;&#x3D;1。要求由小到大依次在同一行输出这三个实根(根与根之间留有空格)，并精确到小数点后2位。</p><p><strong>输入</strong>  一行，包含四个实数a，b，c，d，相邻两个数之间用单个空格隔开。</p><p><strong>输出</strong>  一行，包含三个实数，为该方程的三个实根，按从小到大顺序排列，相邻两个数之间用单个空格隔开，精确到小数点后2位。</p><p><strong>样例输入</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">1.0 -5.0 -4.0 20.0<br></code></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">-2.00 2.00 5.00<br></code></pre></td></tr></table></figure></blockquote><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ol><li>题目简化了求解难度, 根范围, 根间隔给出</li><li>以1为间隔简单找根</li><li>答案保留两位小数, 二分夹逼法</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">double</span> a, b, c, d;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a * x * x * x + b * x * x + c * x + d;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">double</span> i = <span class="hljs-number">-100</span>; i &lt;= <span class="hljs-number">100</span>; i++)<br>    &#123;<br>        <span class="hljs-type">double</span> x1 = i, x2 = i + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">f</span>(x1) == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf &quot;</span>, x1);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">f</span>(x1) * <span class="hljs-built_in">f</span>(x2) &lt; <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">while</span> (x2 - x1 &gt;= <span class="hljs-number">0.001</span>)<br>                &#123;<br>                    <span class="hljs-type">double</span> xm = (x1 + x2) / <span class="hljs-number">2</span>;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">f</span>(xm) * <span class="hljs-built_in">f</span>(x1) &lt; <span class="hljs-number">0</span>)<br>                    &#123;<br>                        x2 = xm;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        x1 = xm;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf &quot;</span>, x1);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OpenJudge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>OpenJudge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VS Code中C++环境配置</title>
    <link href="/VS-Code%E4%B8%ADCPP%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/VS-Code%E4%B8%ADCPP%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前几日身边有人开始学习C语言, 便又重新拾起了自己的兴趣</p><p>但已经许久没有使用VS Code来调试运行C++程序, 本文记录我重新配置环境的过程</p><h1 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h1><h2 id="VS-Code的下载安装"><a href="#VS-Code的下载安装" class="headerlink" title="VS Code的下载安装"></a>VS Code的下载安装</h2><p>由于国内下载速度极为缓慢, 甚至网站都无法打开, 我推荐两种方法</p><ul><li><p>使用CDN加速</p><p>参考文章<a href="https://zhuanlan.zhihu.com/p/112215618">国内下载VS Code速度慢问题解决 - 知乎</a></p><p>将下载地址.net及之前的部分换成<code>vscode.cdn.azure.cn</code>即可高速下载</p></li><li><p>使用国内下载站</p><p><a href="https://pc.qq.com/detail/16/detail_22856.html">腾讯软件中心</a></p><p>缺点是版本无法自选,但起码能用</p></li></ul><p>安装过程无需多言,按需勾选</p><h2 id="VS-Code简单设置"><a href="#VS-Code简单设置" class="headerlink" title="VS Code简单设置"></a>VS Code简单设置</h2><ul><li><p>汉化</p><p>安装插件<a href="https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-zh-hans">Chinese Language Pack</a></p><p>重启即可得到中文页面</p></li><li><p>安装必要插件</p><p><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools">C&#x2F;C++</a></p></li><li><p>个人推荐插件</p><p>如果你要用VS Code来编辑Markdown文档, 需要安装插件<a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one">Markdown All in One</a>和<a href="https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced">Markdown Preview Enhanced</a></p><p>另外,我个人推荐一款主题<a href="https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme">One Dark Pro</a>, 安装完成后使用Ctrl+K&#x2F;Ctrl+T使用</p></li></ul><h2 id="Mingw的安装"><a href="#Mingw的安装" class="headerlink" title="Mingw的安装"></a>Mingw的安装</h2><ul><li><p>安装包获取</p><p><a href="https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/installer/mingw-w64-install.exe/download">Download mingw-w64-install.exe</a></p></li><li><p>安装选项如图</p><p><img src="/./VS-Code%E4%B8%ADCPP%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/install.png"></p></li><li><p>离线安装方法</p><p><a href="https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/8.1.0/threads-win32/seh/x86_64-8.1.0-release-win32-seh-rt_v6-rev0.7z/download">Download x86_64-8.1.0-release-win32-seh</a></p><p>解压到任意目录即可</p></li><li><p>配置环境变量</p><p>将安装目录下的bin文件夹加入系统Path</p></li></ul><h2 id="调试配置"><a href="#调试配置" class="headerlink" title="调试配置"></a>调试配置</h2><h3 id="c-cpp-properties-json配置"><a href="#c-cpp-properties-json配置" class="headerlink" title="c_cpp_properties.json配置"></a>c_cpp_properties.json配置</h3><ul><li>Ctrl+Shift+P打开命令 选择C&#x2F;C++编辑配置</li><li>选择cpp文件所在文件夹</li><li>指定编译器路径</li><li>选择windows-gcc-x64</li><li>标准选择C11&#x2F;C++17</li></ul><h3 id="tasks-json配置"><a href="#tasks-json配置" class="headerlink" title="tasks.json配置"></a>tasks.json配置</h3><ul><li><p>在.vscode文件夹内新建tasks.json文件</p></li><li><p>将下列代码复制进入</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;tasks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shell&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;g++.exe 生成活动文件&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;E:\\mingw64\\bin\\g++.exe&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//路径</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;-g&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-o&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;fileDirname&#125;\\bin\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="hljs-comment">//把exe放入bin/</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;E:\\mingw64\\bin\\&quot;</span><span class="hljs-comment">//路径</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;problemMatcher&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;$gcc&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cppbuild&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C/C++: g++.exe 生成活动文件&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;E:\\mingw64\\bin\\g++.exe&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//路径</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;-fdiagnostics-color=always&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-g&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-o&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;fileDirname&#125;\\bin\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="hljs-comment">//运行exe</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;fileDirname&#125;&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;problemMatcher&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;$gcc&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;isDefault&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;detail&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;调试器生成的任务。&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="launch-json配置"><a href="#launch-json配置" class="headerlink" title="launch.json配置"></a>launch.json配置</h3><ul><li><p>在.vscode文件夹内新建launch.json文件</p></li><li><p>将下列代码复制进入</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;(gdb) 启动&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;preLaunchTask&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;g++.exe 生成活动文件&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//调试前执行的任务</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cppdbg&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//配置类型，只能为cppdbg</span><br>            <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//请求配置类型，可以为launch（启动）或attach（附加）</span><br>            <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;fileDirname&#125;\\bin\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//exe路径</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//调试传递参数</span><br>            <span class="hljs-attr">&quot;stopAtEntry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;fileDirname&#125;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;environment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;externalConsole&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><span class="hljs-comment">//true显示外置的控制台窗口，false显示内置终端</span><br>            <span class="hljs-attr">&quot;MIMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gdb&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;miDebuggerPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;E:\\mingw64\\bin\\gdb.exe&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//路径</span><br>            <span class="hljs-attr">&quot;setupCommands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;为 gdb 启用整齐打印&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;-enable-pretty-printing&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;ignoreFailures&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="调试运行"><a href="#调试运行" class="headerlink" title="调试运行"></a>调试运行</h2><ul><li><p>新建一个cpp文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Hello World!&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>F5运行</p><p>gdb输出到调试控制台</p><p>程序输出到集成终端</p><p><img src="/./VS-Code%E4%B8%ADCPP%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/00002.png"></p></li></ul><p><em>注: 喜欢小黑框可以自行更改, 前文有注释</em></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>vscode是功能强大的工具, 善于利用上限极高</p><p>不过如果小白入门, 还是推荐使用集成式IDE</p>]]></content>
    
    
    <categories>
      
      <category>经验分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>VS Code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown入门</title>
    <link href="/Markdown%E5%85%A5%E9%97%A8/"/>
    <url>/Markdown%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="什么是Markdown"><a href="#什么是Markdown" class="headerlink" title="什么是Markdown?"></a>什么是Markdown?</h2><blockquote><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，Markdown文件的后缀名便是“.md”。</p></blockquote><h2 id="工欲善其事，必先利其器！"><a href="#工欲善其事，必先利其器！" class="headerlink" title="工欲善其事，必先利其器！"></a>工欲善其事，必先利其器！</h2><p>作者使用Visual Studio Code进行编辑<br>安装插件<a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one">Markdown All in One</a>和<a href="https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced">Markdown Preview Enhanced</a></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>本文并非<a href="https://markdown.com.cn/basic-syntax/">Markdown官方教程</a>，仅介绍个人常用语法</p><hr><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><table><thead><tr><th>Markdown语法</th><th>预览效果</th></tr></thead><tbody><tr><td># Heading level 1</td><td><h1>Heading level 1</h1></td></tr><tr><td>## Heading level 2</td><td><h2>Heading level 2</h2></td></tr><tr><td><strong>···</strong></td><td><strong>···</strong></td></tr></tbody></table><p><em>Tips:总共有六级，在#后加上空格保证兼容性</em></p><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><h4 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h4><table><thead><tr><th>Markdown语法</th><th>预览效果</th></tr></thead><tbody><tr><td>Thin **Bold**</td><td>Thin <strong>Bold</strong></td></tr><tr><td>Thin __Bold__</td><td>Thin <strong>Bold</strong></td></tr></tbody></table><h4 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h4><table><thead><tr><th>Markdown语法</th><th>预览效果</th></tr></thead><tbody><tr><td>Straight *Italic*</td><td>Straight <em>Italic</em></td></tr><tr><td>Straight _Italic_</td><td>Straight <em>Italic</em></td></tr></tbody></table><p><em>Tips:表示又粗又斜时连续使用三个***</em></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><strong><p>&gt; 引用1<br>&gt;&gt; 引用2</p></strong><blockquote><p>引用1</p><blockquote><p>引用2</p></blockquote></blockquote><p><em>Tips:空格保证兼容性，多级之间需要分隔</em></p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><strong><p>`&#96;&#96;cpp<br>#include<iostream><br>int main()<br>{<br>    cout &lt;&lt; “Hello World!”;<br>    return 0;<br>}<br>`&#96;&#96;</p></strong><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Hello World!&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><strong><p>[Where is Mountain](<code>https://harker299.gitee.io</code>)</p></strong><p><a href="%60https://harker299.gitee.io%60">Where is Mountain</a></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><strong><p>![这是图片](路径或url “图片描述”)</p></strong><hr>]]></content>
    
    
    <categories>
      
      <category>经验分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CCF NOI Share</title>
    <link href="/CCF%20NOI%20Share/"/>
    <url>/CCF%20NOI%20Share/</url>
    
    <content type="html"><![CDATA[<p>点击 <a href="https://github.com/harkerhand/">https://github.com/harkerhand/</a> 来查看全部源代码。</p><p>这是一个导航页 点击下方列表跳转到对应文章</p><p><a href="../CCF-NOI/1028/index.html">1028.判断互质</a></p><p><a href="../CCF-NOI/1041/index.html">1041.志愿者选拔</a></p><p><a href="../CCF-NOI/1042/index.html">1042.发奖学金</a></p><p><a href="../CCF-NOI/1045/index.html">1045.元素之和</a></p><p><a href="../CCF-NOI/1046/index.html">1046.打印方阵</a></p><p><a href="../CCF-NOI/1047/index.html">1047.寻找鞍点</a></p><p><a href="../CCF-NOI/1048/index.html">1048.检测矩阵</a></p><p><a href="../CCF-NOI/1049/index.html">1049.旋转图像</a></p><p><a href="../CCF-NOI/1050/index.html">1050.矩阵乘法</a></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1788.Pell数列</title>
    <link href="/OJ/1788/"/>
    <url>/OJ/1788/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p><strong>描述</strong>  Pell数列a1, a2, a3, …的定义是这样的，a1 &#x3D; 1, a2 &#x3D; 2, … , an &#x3D; 2 * an − 1 + an - 2 (n &gt; 2)。<br>给出一个正整数k，要求Pell数列的第k项模上32767是多少。</p><p><strong>输入</strong>  第1行是测试数据的组数n，后面跟着n行输入。每组测试数据占1行，包括一个正整数k (1 ≤ k &lt; 1000000)。</p><p><strong>输出</strong>  n行，每行输出对应一个输入。输出应是一个非负整数。</p><p><strong>样例输入</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">2<br>1<br>8<br></code></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1<br>408<br></code></pre></td></tr></table></figure></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>先暴力递归出来1000000位数组</li><li>直接取值即可</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> ans[<span class="hljs-number">1000010</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; <span class="hljs-number">1000000</span>; i++)<br>    &#123;<br>        ans[i] = (ans[i - <span class="hljs-number">1</span>] * <span class="hljs-number">2</span> + ans[i - <span class="hljs-number">2</span>]) % <span class="hljs-number">32767</span>;<span class="hljs-comment">//数学问题 不影响最终值</span><br>    &#125;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">while</span> (n--)<br>    &#123;<br>        <span class="hljs-type">int</span> m;<br>        cin &gt;&gt; m;<br>        cout &lt;&lt; ans[m - <span class="hljs-number">1</span>] &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OpenJudge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>OpenJudge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>666.放苹果</title>
    <link href="/OJ/666/"/>
    <url>/OJ/666/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p><strong>描述</strong>  把M个同样的苹果放在N个同样的盘子里，允许有的盘子空着不放，问共有多少种不同的分法？（用K表示）5，1，1和1，5，1 是同一种分法。</p><p><strong>输入</strong>  第一行是测试数据的数目t（0 &lt;&#x3D; t &lt;&#x3D; 20）。以下每行均包含二个整数M和N，以空格分开。1&lt;&#x3D;M，N&lt;&#x3D;10。</p><p><strong>输出</strong>  对输入的每组数据M和N，用一行输出相应的K。</p><p><strong>样例输入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">1<br>7 3<br></code></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">8<br></code></pre></td></tr></table></figure></blockquote><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ol><li>盘子大于苹果, f(m, n) &#x3D; f(m, m)</li><li>盘子小于苹果<ul><li>存在空盘, 即为f(m, n - 1)</li><li>不存在空盘, 先每个盘放一个, 即为f(m - n, n)</li><li>故f(m, n) &#x3D; f(m, n - 1) + f(m - n, n)</li></ul></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">apple</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (m &lt; n)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">apple</span>(m, m);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (m == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">apple</span>(m - n, n) + <span class="hljs-built_in">apple</span>(m, n - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-type">int</span> m, n;<br>        cin &gt;&gt; m &gt;&gt; n;<br>        cout &lt;&lt; <span class="hljs-built_in">apple</span>(m, n) &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OpenJudge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>OpenJudge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1812.完美立方</title>
    <link href="/OJ/1812/"/>
    <url>/OJ/1812/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p><strong>描述</strong>  形如a3&#x3D; b3 + c3 + d3的等式被称为完美立方等式。例如123&#x3D; 63 + 83 + 103 。编写一个程序，对任给的正整数N (N≤100)，寻找所有的四元组(a, b, c, d)，使得a3 &#x3D; b3 + c3 + d3，其中a,b,c,d 大于 1, 小于等于N，且b&lt;&#x3D;c&lt;&#x3D;d。</p><p><strong>输入</strong>  一个正整数N (N≤100)。</p><p><strong>输出</strong>  每行输出一个完美立方。输出格式为：<br>Cube &#x3D; a, Triple &#x3D; (b,c,d)<br>其中a,b,c,d所在位置分别用实际求出四元组值代入。</p><p>请按照a的值，从小到大依次输出。当两个完美立方等式中a的值相同，则b值小的优先输出、仍相同则c值小的优先输出、再相同则d值小的先输出。</p><p><strong>样例输入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">24<br></code></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">Cube = 6, Triple = (3,4,5)<br>Cube = 12, Triple = (6,8,10)<br>Cube = 18, Triple = (2,12,16)<br>Cube = 18, Triple = (9,12,15)<br>Cube = 19, Triple = (3,10,18)<br>Cube = 20, Triple = (7,14,17)<br>Cube = 24, Triple = (12,16,20)<br></code></pre></td></tr></table></figure></blockquote><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ol><li>bcd一定小于a</li><li>按照题目要求, 从a开始走循环</li><li>去掉重复的</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mySort</span><span class="hljs-params">(<span class="hljs-type">int</span> *a)</span></span>&#123;<span class="hljs-comment">//冒泡排序</span><br>    <span class="hljs-type">int</span> t;<br>    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>] &gt; a[<span class="hljs-number">1</span>])&#123;<br>        t = a[<span class="hljs-number">0</span>];<br>        a[<span class="hljs-number">0</span>] = a [<span class="hljs-number">1</span>];<br>        a[<span class="hljs-number">1</span>] = t;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">1</span>] &gt; a[<span class="hljs-number">2</span>])&#123;<br>        t = a[<span class="hljs-number">1</span>];<br>        a[<span class="hljs-number">1</span>] = a [<span class="hljs-number">2</span>];<br>        a[<span class="hljs-number">2</span>] = t;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>] &gt; a[<span class="hljs-number">1</span>])&#123;<br>        t = a[<span class="hljs-number">0</span>];<br>        a[<span class="hljs-number">0</span>] = a [<span class="hljs-number">1</span>];<br>        a[<span class="hljs-number">1</span>] = t;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> b[<span class="hljs-number">100000</span>][<span class="hljs-number">3</span>], <span class="hljs-type">int</span> mm)</span></span>&#123;<span class="hljs-comment">//传入被比较值和数据库,mm作计数器减少性能开支</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; mm; i++)&#123;<br>        <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>] == b[i][<span class="hljs-number">0</span>] &amp;&amp; a[<span class="hljs-number">1</span>] == b[i][<span class="hljs-number">1</span>] &amp;&amp; a[<span class="hljs-number">2</span>] == b[i][<span class="hljs-number">2</span>])&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> a;<br>    cin &gt;&gt; a;<br>    <span class="hljs-type">int</span> mem[<span class="hljs-number">100000</span>][<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//记忆数组</span><br>    <span class="hljs-type">int</span> mm = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= a; i ++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">2</span>; j &lt; i; j++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> m = <span class="hljs-number">2</span>; m &lt; i; m++)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> n = <span class="hljs-number">2</span>; n &lt; i; n++)&#123;<br>                    <span class="hljs-keyword">if</span>(i * i * i == j * j * j + m * m * m + n * n * n)&#123;<br>                        <span class="hljs-type">int</span> c[<span class="hljs-number">3</span>] = &#123;j, m, n&#125;;<br>                        <span class="hljs-built_in">mySort</span>(c);<span class="hljs-comment">//对符合条件的数组排序</span><br>                        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">compare</span>(c, mem, mm))&#123;<br>                            mem[mm][<span class="hljs-number">0</span>] = c[<span class="hljs-number">0</span>];<br>                            mem[mm][<span class="hljs-number">1</span>] = c[<span class="hljs-number">1</span>];<br>                            mem[mm][<span class="hljs-number">2</span>] = c[<span class="hljs-number">2</span>];<br>                            mm++;<br>                            cout &lt;&lt; <span class="hljs-string">&quot;Cube = &quot;</span>&lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; <span class="hljs-string">&quot; Triple = (&quot;</span> &lt;&lt; j &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; m &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; n &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; endl;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OpenJudge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>OpenJudge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2722.合数</title>
    <link href="/OJ/2722/"/>
    <url>/OJ/2722/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p><strong>描述</strong>  给定一个正整数序列，判断其中有多少个数，等于数列中其他两个数的和。 比如，对于数列1 2 3 4, 这个问题的答案就是2, 因为3 &#x3D; 2 + 1, 4 &#x3D; 1 + 3。</p><p><strong>输入</strong>  共两行，第一行是数列中数的个数n ( 1 &lt;&#x3D; n &lt;&#x3D; 100)，第二行是由n个不大于10000的正整数组成的数列，相邻两个整数之间用单个空格隔开。</p><p><strong>输出</strong>  一个整数，即数列中等于其他两个数之和的数的个数。</p><p><strong>样例输入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">4<br>1 2 3 4<br></code></pre></td></tr></table></figure><p><strong>样例输出</strong></p><p><code>2</code></p></blockquote><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ol><li>声明一个计数器</li><li>最多判断100*100*100次, 可以枚举</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> a, b[<span class="hljs-number">101</span>];<br>    cin &gt;&gt; a;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; a; i++)&#123;<br>        cin &gt;&gt; b[i];<br>    &#125;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; a; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; a; j++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; a; k++)&#123;<br>                <span class="hljs-keyword">if</span>(i == j || i == k || j == k)&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">if</span>(b[i] == b[j] + b[k])&#123;<br>                        ans++;<br>                        j = a;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; ans;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OpenJudge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>OpenJudge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1973.确定进制</title>
    <link href="/OJ/1973/"/>
    <url>/OJ/1973/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p><strong>描述</strong>  6*9 &#x3D; 42 对于十进制来说是错误的，但是对于13进制来说是正确的。即, 6(13) * 9(13) &#x3D; 42(13)， 而 42(13) &#x3D; 4 * 131+ 2 * 130&#x3D; 54(10)。 你的任务是写一段程序读入三个整数p、q和 r，然后确定一个进制 B(2&lt;&#x3D;B&lt;&#x3D;16) 使得 p * q &#x3D; r. 如果 B有很多选择, 输出最小的一个。例如： p &#x3D; 11, q &#x3D; 11, r &#x3D; 121. 则有 11(3) * 11(3) &#x3D; 121(3) 因为 11(3) &#x3D; 1 * 31+ 1 * 30&#x3D; 4(10) 和 121(3) &#x3D; 1 * 32+ 2 * 31+ 1 * 30&#x3D; 16(10)。 对于进制 10,有 11(10) * 11(10) &#x3D; 121(10)。这种情况下，应该输出 3。如果没有合适的进制，则输出 0。</p><p><strong>输入</strong>  一行，包含三个整数p、q、r，相邻两个整数之间用单个空格隔开。 p、q、r的所有位都是数字，并且1 &lt;&#x3D; p、q、r &lt;&#x3D; 1,000,000。</p><p><strong>输出</strong>  一个整数：即使得p * q &#x3D; r成立的最小的B。如果没有合适的B，则输出 0。</p><p><strong>样例输入</strong><br><code>6 9 42</code></p><p><strong>样例输出</strong><br><code>13</code></p></blockquote><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ol><li>找出三个数最大数字, 确定最低进制</li><li>枚举转换判断</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">to10</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>&#123;<span class="hljs-comment">//a是数字，b是进制</span><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> temp;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> x = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(a)&#123;<br>        temp = a % <span class="hljs-number">10</span>;<br>        ans += temp * x;<br>        x *= b;<br>        a /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>&#123;<span class="hljs-comment">//找出a的最大位数字</span><br>    <span class="hljs-type">int</span> temp;<br>    <span class="hljs-type">int</span> max = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (a)<br>    &#123;<br>        temp = a % <span class="hljs-number">10</span>;<br>        a /= <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">if</span>(temp &gt; max)&#123;<br>            max = temp;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> max;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a, b, c;<br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>    <span class="hljs-type">int</span> m = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">max</span>(a) &gt; m)&#123;<br>        m = <span class="hljs-built_in">max</span>(a);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">max</span>(b) &gt; m)&#123;<br>        m = <span class="hljs-built_in">max</span>(b);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">max</span>(c) &gt; m)&#123;<br>        m = <span class="hljs-built_in">max</span>(c);<br>    &#125;<span class="hljs-comment">//三个if找出最大数字</span><br><br><span class="hljs-comment">//进制为最大数 + 1</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = m + <span class="hljs-number">1</span>; i; i++)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">to10</span>(a, i) * <span class="hljs-built_in">to10</span>(b, i) == <span class="hljs-built_in">to10</span>(c, i))&#123;<br>            cout &lt;&lt; i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">16</span>)&#123;<span class="hljs-comment">//枚举到16进制仍然无答案 输出0</span><br>            cout &lt;&lt; <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OpenJudge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>OpenJudge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1046.打印方阵</title>
    <link href="/CCF-NOI/1046/"/>
    <url>/CCF-NOI/1046/</url>
    
    <content type="html"><![CDATA[<h2 id="NOI-CCF-1046-打印方阵"><a href="#NOI-CCF-1046-打印方阵" class="headerlink" title="NOI CCF 1046.打印方阵"></a>NOI CCF 1046.打印方阵</h2><blockquote><p><strong>题目描述</strong> 打印一个n*n的数字方阵，例如n&#x3D;4时：(n&lt;&#x3D;100) 1  3   4   10 2  5   9   11 6  8<br>12  15 7  13  14  16</p><p><strong>输入</strong> 输入n。</p><p><strong>输出</strong> 输出n*n的方阵。</p><p><strong>样例输入</strong> 4</p><p><strong>样例输出</strong><br>1 3 4 10<br>2 5 9 11<br>6 8 12 15<br>7 13 14 16</p></blockquote><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><ol><li>用二维数组储存</li><li>用n的奇偶判断Z型走向</li><li>补足特殊情况</li><li>常规双循环输出</li></ol><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> a[<span class="hljs-number">103</span>][<span class="hljs-number">103</span>], x, y, k, n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>cin &gt;&gt; n;<br>x = y = k = <span class="hljs-number">0</span>;<br>a[x][y] = ++k; <span class="hljs-comment">//初始</span><br><br><span class="hljs-comment">//左上</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br><span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) a[++x][--y] = ++k;<br>a[++x][y] = ++k;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++)a[--x][++y] = ++k;<br>a[x][++y] = ++k;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//补空换位</span><br><span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)y--, x++;<br><span class="hljs-keyword">else</span> y++, x--;<br>a[x][y] = k;<br><br><span class="hljs-comment">//右下</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">2</span>; i &gt; <span class="hljs-number">0</span>; i--)<br><span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++)a[++x][--y] = ++k;<br>a[x][++y] = ++k;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++)a[--x][++y] = ++k;<br>a[++x][y] = ++k;<br>&#125;<br><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y = <span class="hljs-number">0</span>;y &lt; n; y++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>;x &lt; n; x++) &#123;<br>cout &lt;&lt; a[x][y] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CCF NOI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>OpenJudge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1045.元素之和</title>
    <link href="/CCF-NOI/1045/"/>
    <url>/CCF-NOI/1045/</url>
    
    <content type="html"><![CDATA[<h2 id="NOI-CCF-1045-元素之和"><a href="#NOI-CCF-1045-元素之和" class="headerlink" title="NOI CCF 1045. 元素之和"></a>NOI CCF 1045. 元素之和</h2><blockquote><p><strong>题目描述</strong> 输入4*4方阵，分别求两条对角线上元素之和。</p><p><strong>输入</strong> 输入4*4方阵。</p><p><strong>输出</strong> 输出两条对角线上元素之和(如样例所示)。</p><p><strong>样例输入</strong><br>0 0 2 7<br>5 3 2 1<br>9 9 7 0<br>9 1 9 5 </p><p><strong>样例输出</strong> 15 27</p><p><strong>数据范围限制</strong> 0&lt;元素值&lt;10000</p></blockquote><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>显然 使用暴力解法</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> a, b, sum1 = <span class="hljs-number">0</span>, sum2 = <span class="hljs-number">0</span>; <span class="hljs-comment">//a用来读数，b用来补空</span><br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; b;<br>    sum1 += a;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    sum2 += a;<br>    cin &gt;&gt; a;<br>    sum1 += a;<br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; b;<br>    sum2 += a;<br>    cin &gt;&gt; a;<br>    sum2 += a;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    sum1 += a;<br>    cin &gt;&gt; a &gt;&gt; b &gt;&gt; b;<br>    sum2 += a;<br>    cin &gt;&gt; a;<br>    sum1 += a;<br>    cout &lt;&lt; sum1 &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; sum2;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CCF NOI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>OpenJudge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1042.发奖学金</title>
    <link href="/CCF-NOI/1042/"/>
    <url>/CCF-NOI/1042/</url>
    
    <content type="html"><![CDATA[<h2 id="NOI-CCF-1042-发奖学金"><a href="#NOI-CCF-1042-发奖学金" class="headerlink" title="NOI CCF 1042.发奖学金"></a>NOI CCF 1042.发奖学金</h2><blockquote><p><strong>题目描述</strong> 某小学最近得到了一笔赞助，打算拿出其中一部分为学习成绩优秀的前5名学生发奖学金。期末，每个学生都有3门课的成绩:语文、数学、英语。先按总分从高到低排序，如果两个同学总分相同，再按语文成绩从高到低排序，如果两个同学总分和语文成绩都相同，那么规定学号小的同学排在前面，这样，每个学生的排序是唯一确定的。<br>任务：先根据输入的3门课的成绩计算总分，然后按上述规则排序，最后按排名顺序输出前五名名学生的学号和总分。注意，在前5名同学中，每个人的奖学金都不相同，因此，你必须严格按上述规则排序。例如，在某个正确答案中，如果前两行的输出数据(每行输出两个数:学号、总分)<br>是: 7 279 5 279 这两行数据的含义是:总分最高的两个同学的学号依次是7号、5号。这两名同学的总分都是 279<br>(总分等于输入的语文、数学、英语三科成绩之和) ，但学号为7的学生语文成绩更高一些。如果你的前两名的输出数据是: 5 279 7 279<br>则按输出错误处理，不能得分。</p><p><strong>输入</strong> 包含n+1行: 第1行为一个正整数n，表示该校参加评选的学生人数。 第2到n+1行，每行有3个用空格隔开的数字，每个数字都在0到100之间。第j行的3个数字依次表示学号为 j-1<br>的学生的语文、数学、英语的成绩。每个学生的学号按照输入顺序编号为1~n (恰好是输入数据的行号减1)。所给的数据都是正确的，不必检验。</p><p><strong>输出</strong> 共有5行，每行是两个用空格隔开的正整数，依次表示前5名学生的学号和总分。</p><p><strong>样例输入</strong> 6 90 67 80 87 66 91 78 89 91 88 99 77 67 89 64 78 89 98</p><p><strong>样例输出</strong> 6 265 4 264 3 258 2 244 1 237</p><p><strong>数据范围限制</strong> 50%的数据满足:各学生的总成绩各不相同； 100%的数据满足: 6&lt;&#x3D;n&lt;&#x3D;300。</p></blockquote><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; score;<br>vector&lt;<span class="hljs-type">int</span>&gt; lin;<br><br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">com</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; a, <span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; b)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (a[<span class="hljs-number">2</span>] != b[<span class="hljs-number">2</span>])<span class="hljs-keyword">return</span> a[<span class="hljs-number">2</span>] &gt; b[<span class="hljs-number">2</span>];<br><span class="hljs-keyword">if</span> (a[<span class="hljs-number">1</span>] != b[<span class="hljs-number">1</span>])<span class="hljs-keyword">return</span> a[<span class="hljs-number">1</span>] &gt; b[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> a[<span class="hljs-number">0</span>] &lt; b[<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> num, ch, ma, en;<br>cin &gt;&gt; num;<br>num = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (cin &gt;&gt; ch &gt;&gt; ma &gt;&gt; en) &#123;<br>lin.<span class="hljs-built_in">clear</span>();<br>lin.<span class="hljs-built_in">push_back</span>(num);<br>lin.<span class="hljs-built_in">push_back</span>(ch);<br>lin.<span class="hljs-built_in">push_back</span>(ch + ma + en);<br>score.<span class="hljs-built_in">push_back</span>(lin);<br>num++;<br>&#125;<br><span class="hljs-built_in">sort</span>(score.<span class="hljs-built_in">begin</span>(), score.<span class="hljs-built_in">end</span>(), com);<br><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>cout &lt;&lt; score[i][<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; score[i][<span class="hljs-number">2</span>] &lt;&lt; endl;<br>&#125;<br><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CCF NOI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>OpenJudge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1041.志愿者选拔</title>
    <link href="/CCF-NOI/1041/"/>
    <url>/CCF-NOI/1041/</url>
    
    <content type="html"><![CDATA[<h2 id="NOI-CCF-1041-志愿者选拔"><a href="#NOI-CCF-1041-志愿者选拔" class="headerlink" title="NOI CCF 1041.志愿者选拔"></a>NOI CCF 1041.志愿者选拔</h2><blockquote><p><strong>题目描述</strong> 世博会志愿者的选拔工作正在 A 市如火如荼的进行。为了选拔最合适的人才，A市对所有报名的选手进行了笔试，笔试分数达到面试分数线的选手方可进入面试。面试分数线根据计划录取人数的150%划定，即如果计划录取m名志愿者，则面试分数线为排名第m*150%（向下取整）名的选手的分数，而最终进入面试的选手为笔试成绩不低于面试分数线的所有选手。<br>现在就请你编写程序划定面试分数线，并输出所有进入面试的选手的报名号和笔试成绩。</p><p><strong>输入</strong> 第一行，两个整数n，m（5 ≤ n ≤ 5000，3 ≤ m ≤ n），中间用一个空格隔开，其中n 表示报名参加笔试的选手总数，m 表示计划录取的志愿者人数。输入数据保证m*150%向下取整后小于等于n。 第二行到第 n+1<br>行，每行包括两个整数，中间用一个空格隔开，分别是选手的报名号k（1000 ≤ k ≤ 9999）和该选手的笔试成绩s（1 ≤ s ≤<br>100）。数据保证选手的报名号各不相同。</p><p><strong>输出</strong> 第一行，有两个整数，用一个空格隔开，第一个整数表示面试分数线；第二个整数为进入面试的选手的实际人数。 从第二行开始，每行包含两个整数，中间用一个空格隔开，分别表示进入面试的选手的报名号和笔试成绩，按照笔试成绩从高到低输出，如果成绩相同，则按报名号由小到大的顺序输出。</p><p><strong>样例输入</strong> 6 3 1000 90 3239 88 2390 95 7231 84 1005 95 1001 88</p><p><strong>样例输出</strong> 88 5 1005 95 2390 95 1000 90 1001 88 3239 88</p></blockquote><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; pp;<br>vector&lt;<span class="hljs-type">int</span>&gt; lin;<br>vector&lt;<span class="hljs-type">int</span>&gt; sco;<br>vector&lt;<span class="hljs-type">int</span>&gt; sco2;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; a, <span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> a[<span class="hljs-number">0</span>] &lt;= b[<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> a;<br><span class="hljs-type">double</span> b;<br>cin &gt;&gt; a &gt;&gt; b;<br><span class="hljs-type">int</span> lu = <span class="hljs-built_in">int</span>(b * <span class="hljs-number">1.5</span>) - <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> num, score;<br><span class="hljs-keyword">while</span> (cin &gt;&gt; num &gt;&gt; score) &#123;<br>sco.<span class="hljs-built_in">push_back</span>(score);<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">count</span>(sco<span class="hljs-number">2.</span><span class="hljs-built_in">begin</span>(), sco<span class="hljs-number">2.</span><span class="hljs-built_in">end</span>(), score))sco<span class="hljs-number">2.</span><span class="hljs-built_in">push_back</span>(score);<br>lin.<span class="hljs-built_in">clear</span>();<br>lin.<span class="hljs-built_in">push_back</span>(num);<br>lin.<span class="hljs-built_in">push_back</span>(score);<br>pp.<span class="hljs-built_in">push_back</span>(lin);<br>&#125;<br><br><span class="hljs-built_in">sort</span>(sco.<span class="hljs-built_in">begin</span>(), sco.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;());<br><span class="hljs-type">int</span> min = sco[lu];<br><span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; sco.<span class="hljs-built_in">size</span>(); i++) &#123;<br><span class="hljs-keyword">if</span> (sco[i] &gt;= min)k++;<br>&#125;<br><br>cout &lt;&lt; min &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; k &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br><br>k = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">sort</span>(sco<span class="hljs-number">2.</span><span class="hljs-built_in">begin</span>(), sco<span class="hljs-number">2.</span><span class="hljs-built_in">end</span>(), <span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;());<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; sco<span class="hljs-number">2.</span><span class="hljs-built_in">size</span>(); i++) &#123;<br><span class="hljs-keyword">if</span> (sco2[i] &gt;= min)k++;<br>&#125;<br><br><span class="hljs-built_in">sort</span>(pp.<span class="hljs-built_in">begin</span>(), pp.<span class="hljs-built_in">end</span>(), cmp);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; pp.<span class="hljs-built_in">size</span>(); j++) &#123;<br><span class="hljs-keyword">if</span> (pp[j][<span class="hljs-number">1</span>] == sco2[i]) &#123;<br>cout &lt;&lt; pp[j][<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; pp[j][<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CCF NOI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>OpenJudge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1028.判断互质</title>
    <link href="/CCF-NOI/1028/"/>
    <url>/CCF-NOI/1028/</url>
    
    <content type="html"><![CDATA[<h2 id="CCF-NOI-1028-判断互质"><a href="#CCF-NOI-1028-判断互质" class="headerlink" title="CCF NOI 1028.判断互质"></a>CCF NOI 1028.判断互质</h2><blockquote><p><strong>题目描述</strong> 输入两个正整数m和n，判断m和n是否互质（即最大公约数为1），是则输出Yes，否则输出No。 </p><p> <strong>输入</strong> 输入两个整数m和n，中间用空格隔开。</p><p><strong>输出</strong> 如互质输出Yes，否则输出No。</p><p><strong>样例输入</strong>：36 56</p><p><strong>样例输出</strong>：No</p><p><strong>数据范围限制</strong>：1&lt;&#x3D;n,m&lt;2^31</p></blockquote><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><ol><li>m,n取值范围都极大，无法通过暴力计算</li><li>判断互质的标准为最大公约数是否为1</li></ol><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> m, n;<br>cin &gt;&gt; m &gt;&gt; n;<br><br><span class="hljs-type">int</span> a = m, b = n, ok = <span class="hljs-number">1</span>, max, r, q;<br><span class="hljs-keyword">while</span> (ok) &#123;<br>r = a % b;<br>q = a / b;<br><span class="hljs-keyword">if</span> (!r) &#123;<br>max = b;<br>ok = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>a = b;<br>b = r;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (max == <span class="hljs-number">1</span>)cout &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span>;<br><span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;No&quot;</span>;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CCF NOI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>OpenJudge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1050.矩阵乘法</title>
    <link href="/CCF-NOI/1050/"/>
    <url>/CCF-NOI/1050/</url>
    
    <content type="html"><![CDATA[<h2 id="NOI-CCF-1050-矩阵乘法"><a href="#NOI-CCF-1050-矩阵乘法" class="headerlink" title="NOI CCF 1050.矩阵乘法"></a>NOI CCF 1050.矩阵乘法</h2><blockquote><p><strong>题目描述</strong> 计算两个矩阵的乘法。n<em>m阶的矩阵A乘以m</em>k阶的矩阵B得到的矩阵C 是n*k阶的，且C[i][j] &#x3D;A[i][0]*B[0][j] + A[i][1]*B[1][j] + …… +A[i][m-1]*B[m-1]<a href="C%5Bi%5D%5Bj%5D%E8%A1%A8%E7%A4%BAC%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%AC%ACi%E8%A1%8C%E7%AC%ACj%E5%88%97%E5%85%83%E7%B4%A0">j</a>。</p><p><strong>输入</strong> 第一行为n, m, k，表示A矩阵是n行m列，B矩阵是m行k列，n, m,k均小于100；然后先后输入A和B两个矩阵，A矩阵n行m列，B矩阵m行k列，矩阵中每个元素的绝对值不会大于100。</p><p><strong>输出</strong> 输出矩阵C，一共n行，每行k个整数，整数之间以一个空格分开。 分析：由定义可得：C[i][j] &#x3D; A[i][0]*B[0][j] + A[i][1]*B[1][j] + ……+A[i][m-1]*B[m-1][j](C[i][j]，因此每次计算C[i][j]时可以枚举k&#x3D;0~m-1，计算的和。</p><p><strong>样例输入</strong> 2 3 2 1 2 3 2 1 4 1 2 2 1 3 2</p><p><strong>样例输出</strong> 14 10 16 13</p></blockquote><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>分别存储两个矩阵，按照题目给出算法计算积和</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m,k,A[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>],B[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>];<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j &lt;= m;j++)&#123;<br>            cin &gt;&gt; A[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= m;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j &lt;= k;j++)&#123;<br>            cin &gt;&gt; B[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> l;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j &lt;= k;j++)&#123;<br>            l = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> h = <span class="hljs-number">1</span>;h &lt;= m;h++)&#123;<br>                l += A[i][h] * B[h][j];<br>            &#125;<br>            cout &lt;&lt; l &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CCF NOI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>OpenJudge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1049.旋转图像</title>
    <link href="/CCF-NOI/1049/"/>
    <url>/CCF-NOI/1049/</url>
    
    <content type="html"><![CDATA[<h2 id="NOI-CCF-1049-旋转图像"><a href="#NOI-CCF-1049-旋转图像" class="headerlink" title="NOI CCF 1049.旋转图像"></a>NOI CCF 1049.旋转图像</h2><blockquote><p><strong>题目描述</strong> 输入一个n行m列的黑白图像，将它顺时针旋转90度后输出。</p><p><strong>输入</strong> 第一行包含两个整数n和m，表示图像包含像素点的行数和列数。1 &lt;&#x3D; n &lt;&#x3D; 100，1 &lt;&#x3D; m &lt;&#x3D; 100。接下来n行，每行m个整数，表示图像的每个像素点灰度。相邻两个整数之间用单个空格隔开，每个元素均在0~255之间。</p><p><strong>输出</strong> m行，每行n个整数，为顺时针旋转90度后的图像。相邻两个整数之间用单个空格隔开。</p><p><strong>样例输入</strong><br>3 3<br>1 2 3<br>4 5 6<br>7 8 9</p><p><strong>样例输出</strong><br>7 4 1<br>8 5 2<br>9 6 3</p><p><strong>数据范围限制</strong> 1 &lt;&#x3D; n &lt;&#x3D; 100，1 &lt;&#x3D; m &lt;&#x3D; 100。</p></blockquote><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>进行简单的数学计算，就可以得出坐标的对应坐标</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>],m,n;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j &lt;= m;j++)&#123;<br>            cin &gt;&gt; a[n + <span class="hljs-number">1</span> - i][j];<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= m;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j &lt;= n;j++)&#123;<br>            cout &lt;&lt; a[j][i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CCF NOI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>OpenJudge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1048.检测矩阵</title>
    <link href="/CCF-NOI/1048/"/>
    <url>/CCF-NOI/1048/</url>
    
    <content type="html"><![CDATA[<h2 id="NOI-CCF-1048-检测矩阵"><a href="#NOI-CCF-1048-检测矩阵" class="headerlink" title="NOI CCF 1048. 检测矩阵"></a>NOI CCF 1048. 检测矩阵</h2><blockquote><p><strong>题目描述</strong> 给定n*n由0和1组成的矩阵，如果矩阵的每一行和每一列的1的数量都是偶数，则认为符合条件。你的任务就是检测矩阵是否符合条件，或者在仅改变一个矩阵元素的情况下能否符合条件。 “改变矩阵元素”的操作定义为0变成1或者1变成0。</p><p><strong>输入</strong> 输入n + 1行，第1行为矩阵的大小n(0 &lt; n &lt; 100)，以下n行为矩阵的每一行的元素，元素之间以一个空格分开。</p><p><strong>输出</strong> 如果矩阵符合条件，则输出OK； 如果矩阵仅改变一个矩阵元素就能符合条件，则输出需要改变的元素所在的行号和列号，以一个空格分开。如果不符合以上两条，输出Corrupt。</p><p><strong>样例输入</strong><br>4<br>1 0 1 0<br>0 0 0 0<br>1 1 1 1<br>0 1 0 1</p><p><strong>样例输出</strong> OK</p></blockquote><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><ol><li>二进制计算每一行每一列加和</li><li>横纵奇数为0情况1，横纵奇数为1情况2，其余情况3</li></ol><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> a[<span class="hljs-number">105</span>][<span class="hljs-number">105</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n, x[<span class="hljs-number">105</span>], y[<span class="hljs-number">105</span>];<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>cin &gt;&gt; a[j][i];<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>x[i] = <span class="hljs-number">0</span>;<br>y[i] = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>x[i] += a[j][i];<br>y[j] += a[j][i];<br>&#125;<br>&#125;<br><br><br><span class="hljs-type">int</span> cx = <span class="hljs-number">0</span>, cy = <span class="hljs-number">0</span>, xz, yz;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br><span class="hljs-keyword">if</span> (x[i] % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>cx++;<br>xz = i;<br>&#125;<br><span class="hljs-keyword">if</span> (y[i] % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>cy++;<br>yz = i;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (cx == <span class="hljs-number">0</span> &amp;&amp; cy == <span class="hljs-number">0</span>) cout &lt;&lt; <span class="hljs-string">&quot;OK&quot;</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cx == <span class="hljs-number">1</span> &amp;&amp; cy == <span class="hljs-number">1</span>) cout &lt;&lt; xz &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; yz;<br><span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;Corrupt&quot;</span>;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CCF NOI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>OpenJudge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1047.寻找鞍点</title>
    <link href="/CCF-NOI/1047/"/>
    <url>/CCF-NOI/1047/</url>
    
    <content type="html"><![CDATA[<h2 id="NOI-CCF-1047-寻找鞍点"><a href="#NOI-CCF-1047-寻找鞍点" class="headerlink" title="NOI CCF 1047. 寻找鞍点"></a>NOI CCF 1047. 寻找鞍点</h2><blockquote><p><strong>题目描述</strong><br>给定一个5*5的矩阵，每行只有一个最大值，每列只有一个最小值，寻找这个矩阵的鞍点。鞍点指的是矩阵中的一个元素，它是所在行的最大值，并且是所在列的最小值。<br>例如：在下面的例子中（第4行第1列的元素就是鞍点，值为8 ）。<br>11 3 5 6 9<br>12 4 7 8 10<br>10 5 6 9 11<br>8 6 4 7 2<br>15 10 11 20 25<br><strong>输入</strong><br>输入包含一个5行5列的矩阵<br><strong>输出</strong><br>如果存在鞍点，输出鞍点所在的行、列及其值，如果不存在，输出”not found”<br><strong>样例输入</strong><br>11 3 5 6 9<br>12 4 7 8 10<br>10 5 6 9 11<br>8  6 4 7 2<br>15 10 11 20 25<br><strong>样例输出</strong><br>4 1 8</p></blockquote><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><ol><li>输入用常规循环</li><li>用简单算法测最大最小，保存特殊值及其位置</li><li>输出检测特殊值</li></ol><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> a[<span class="hljs-number">8</span>][<span class="hljs-number">8</span>], c[<span class="hljs-number">8</span>][<span class="hljs-number">8</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">6</span>; j++) &#123;<br>cin &gt;&gt; a[j][i];<br>&#125;<br>&#125;<br><br><span class="hljs-type">int</span> max, maxn = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>max = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">6</span>; j++) &#123;<br><span class="hljs-keyword">if</span> (a[j][i] &gt; max) &#123;<br>max = a[j][i];<br>maxn = j;<br>&#125;<br>&#125;<br>c[maxn][i]++;<br>&#125;<br><br><span class="hljs-type">int</span> min, minn = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>min = <span class="hljs-number">100000</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">6</span>; j++) &#123;<br><span class="hljs-keyword">if</span> (a[i][j] &lt; min) &#123;<br>min = a[i][j];<br>minn = j;<br>&#125;<br>&#125;<br>c[i][minn]++;<br>&#125;<br><br><span class="hljs-type">int</span> ok = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">6</span>; j++) &#123;<br><span class="hljs-keyword">if</span> (c[i][j] == <span class="hljs-number">2</span>) &#123;<br>cout &lt;&lt; j &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; a[i][j];<br>ok--;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (ok)cout &lt;&lt; <span class="hljs-string">&quot;not found&quot;</span>;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CCF NOI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>OpenJudge</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[!(function () {    /** 计时起始时间，自行修改 **/    var start = new Date("2020/09/01 00:00:00");    function update() {        var now = new Date();        now.setTime(now.getTime() + 250);        days = (now - start) / 1000 / 60 / 60 / 24;        dnum = Math.floor(days);        hours = (now - start) / 1000 / 60 / 60 - (24 * dnum);        hnum = Math.floor(hours);        if (String(hnum).length === 1) {            hnum = "0" + hnum;        }        minutes = (now - start) / 1000 / 60 - (24 * 60 * dnum) - (60 * hnum);        mnum = Math.floor(minutes);        if (String(mnum).length === 1) {            mnum = "0" + mnum;        }        seconds = (now - start) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);        snum = Math.round(seconds);        if (String(snum).length === 1) {            snum = "0" + snum;        }        document.getElementById("timeDate").innerHTML = "本站安全运行&nbsp" + dnum + "&nbsp天";        document.getElementById("times").innerHTML = hnum + "&nbsp小时&nbsp" + mnum + "&nbsp分&nbsp" + snum + "&nbsp秒";    }    update();    setInterval(update, 1000);})();]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<p>欢迎来到<a href="https://www.harkerhand.online/">Where Is Mountain</a></p><p>这里有：</p><ol><li><p>个人经验分享</p></li><li><p>数码IT等的独到见解</p></li><li><p>算法习题思路分享</p></li></ol><h2 id="转载文章"><a href="#转载文章" class="headerlink" title="转载文章"></a>转载文章</h2><p>本站所有文章开放转载</p><p>转载请注明原作者与原文链接</p><h2 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h2><p>点击页面上方的图标可以直达我的社交平台</p><p>你也可以扫描二维码添加我的个人QQ</p><p><em>好友申请备注：From Blog</em></p><h2 id="以下来自Github-Profile"><a href="#以下来自Github-Profile" class="headerlink" title="以下来自Github Profile"></a>以下来自Github Profile</h2><h3 id="👋-Hi-there"><a href="#👋-Hi-there" class="headerlink" title="👋 Hi, there"></a>👋 Hi, there</h3><ul><li><p>☔ I’m studying CS at SEU</p></li><li><p>💻 I love algorithm competitions &amp;&amp; Android development</p></li><li><p>💖 I mostly use:</p><p><a href="https://skillicons.dev/"><img src="https://skillicons.dev/icons?i=c,cpp,java,vscode,idea" alt="I mostly use"></a></p></li><li><p>👻 My skills:</p><p><a href="https://skillicons.dev/"><img src="https://skillicons.dev/icons?i=js,jquery,html,css,kotlin,py,pycharm,nodejs,npm,ps,pr,ae,au,ai,notion" alt="My skills"></a></p></li><li><p>😍 Top Languages</p></li></ul><p><a href="https://github.com/anuraghazra/github-readme-stats"><img src="https://github-readme-stats.vercel.app/api/top-langs/?username=harkerhand&layout=compact" alt="Top Langs"></a></p><ul><li>😰 Commit Stats</li></ul><p><a href="https://github.com/anuraghazra/github-readme-stats"><img src="https://github-readme-stats.vercel.app/api?username=harkerhand&count_private=true&show_icons=true&theme=ambient_gradient" alt="Anurag&#39;s GitHub stats"></a></p><ul><li>🙈 Commit Graph</li></ul><p><a href="https://github.com/ashutosh00710/github-readme-activity-graph"><img src="https://github-readme-activity-graph.vercel.app/graph?username=harkerhand&theme=github-light" alt="Ashutosh&#39;s github activity graph"></a></p>]]></content>
    
  </entry>
  
  
  
</search>
